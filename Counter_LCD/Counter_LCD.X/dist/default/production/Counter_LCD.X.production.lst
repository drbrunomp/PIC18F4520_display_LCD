

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon May 22 19:29:15 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37   000000                     
    38                           ; Version 2.40
    39                           ; Generated 17/11/2021 GMT
    40                           ; 
    41                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73   000000                     _PORTDbits	set	3971
    74   000000                     _PORTBbits	set	3969
    75   000000                     _TRISB	set	3987
    76   000000                     _OSCTUNE	set	3995
    77   000000                     _OSCCON	set	4051
    78   000000                     _ADCON1	set	4033
    79   000000                     _TRISD	set	3989
    80   000000                     _PORTD	set	3971
    81   000000                     _TRISEbits	set	3990
    82   000000                     _PORTEbits	set	3972
    83                           
    84                           	psect	smallconst
    85   000600                     __psmallconst:
    86                           	callstack 0
    87   000600  00                 	db	0
    88   000601                     STR_4:
    89   000601  20                 	db	32
    90   000602  20                 	db	32
    91   000603  20                 	db	32
    92   000604  20                 	db	32
    93   000605  20                 	db	32
    94   000606  20                 	db	32
    95   000607  20                 	db	32
    96   000608  20                 	db	32
    97   000609  20                 	db	32
    98   00060A  20                 	db	32
    99   00060B  20                 	db	32
   100   00060C  20                 	db	32
   101   00060D  20                 	db	32
   102   00060E  20                 	db	32
   103   00060F  20                 	db	32
   104   000610  20                 	db	32
   105   000611  00                 	db	0
   106   000612                     STR_1:
   107   000612  20                 	db	32
   108   000613  20                 	db	32
   109   000614  20                 	db	32
   110   000615  20                 	db	32
   111   000616  43                 	db	67	;'C'
   112   000617  4F                 	db	79	;'O'
   113   000618  55                 	db	85	;'U'
   114   000619  4E                 	db	78	;'N'
   115   00061A  54                 	db	84	;'T'
   116   00061B  45                 	db	69	;'E'
   117   00061C  52                 	db	82	;'R'
   118   00061D  20                 	db	32
   119   00061E  20                 	db	32
   120   00061F  20                 	db	32
   121   000620  20                 	db	32
   122   000621  00                 	db	0
   123   000622                     STR_3:
   124   000622  41                 	db	65	;'A'
   125   000623  55                 	db	85	;'U'
   126   000624  4C                 	db	76	;'L'
   127   000625  41                 	db	65	;'A'
   128   000626  20                 	db	32
   129   000627  31                 	db	49	;'1'
   130   000628  20                 	db	32
   131   000629  2D                 	db	45
   132   00062A  20                 	db	32
   133   00062B  4C                 	db	76	;'L'
   134   00062C  43                 	db	67	;'C'
   135   00062D  44                 	db	68	;'D'
   136   00062E  3A                 	db	58	;':'
   137   00062F  20                 	db	32
   138   000630  20                 	db	32
   139   000631  00                 	db	0
   140   000632                     STR_2:
   141   000632  25                 	db	37
   142   000633  30                 	db	48	;'0'
   143   000634  32                 	db	50	;'2'
   144   000635  64                 	db	100	;'d'
   145   000636  00                 	db	0
   146   000637  00                 	db	0	; dummy byte at the end
   147   000000                     
   148                           ; #config settings
   149                           
   150                           	psect	cinit
   151   0015E8                     __pcinit:
   152                           	callstack 0
   153   0015E8                     start_initialization:
   154                           	callstack 0
   155   0015E8                     __initialization:
   156                           	callstack 0
   157                           
   158                           ; Clear objects allocated to BANK0 (48 bytes)
   159   0015E8  EE00  F080         	lfsr	0,__pbssBANK0
   160   0015EC  0E30               	movlw	48
   161   0015EE                     clear_0:
   162   0015EE  6AEE               	clrf	postinc0,c
   163   0015F0  06E8               	decf	wreg,f,c
   164   0015F2  E1FD               	bnz	clear_0
   165                           
   166                           ; Clear objects allocated to COMRAM (7 bytes)
   167   0015F4  EE00  F071         	lfsr	0,__pbssCOMRAM
   168   0015F8  0E07               	movlw	7
   169   0015FA                     clear_1:
   170   0015FA  6AEE               	clrf	postinc0,c
   171   0015FC  06E8               	decf	wreg,f,c
   172   0015FE  E1FD               	bnz	clear_1
   173   001600                     end_of_initialization:
   174                           	callstack 0
   175   001600                     __end_of__initialization:
   176                           	callstack 0
   177   001600  0E00               	movlw	low (__Lmediumconst shr (0+16))
   178   001602  6EF8               	movwf	tblptru,c
   179   001604  0100               	movlb	0
   180   001606  EF50  F008         	goto	_main	;jump to C main() function
   181                           
   182                           	psect	bssCOMRAM
   183   000071                     __pbssCOMRAM:
   184                           	callstack 0
   185   000071                     _width:
   186                           	callstack 0
   187   000071                     	ds	2
   188   000073                     _prec:
   189                           	callstack 0
   190   000073                     	ds	2
   191   000075                     _counter:
   192                           	callstack 0
   193   000075                     	ds	2
   194   000077                     _flags:
   195                           	callstack 0
   196   000077                     	ds	1
   197                           
   198                           	psect	bssBANK0
   199   000080                     __pbssBANK0:
   200                           	callstack 0
   201   000080                     _dbuf:
   202                           	callstack 0
   203   000080                     	ds	32
   204   0000A0                     _bufferLCD:
   205                           	callstack 0
   206   0000A0                     	ds	16
   207                           
   208                           	psect	cstackCOMRAM
   209   000001                     __pcstackCOMRAM:
   210                           	callstack 0
   211   000001                     ?_isdigit:
   212                           	callstack 0
   213   000001                     ?_isspace:
   214                           	callstack 0
   215   000001                     ?___wmul:
   216                           	callstack 0
   217   000001                     ?___aodiv:
   218                           	callstack 0
   219   000001                     ?___aomod:
   220                           	callstack 0
   221   000001                     set_bit@comp:
   222                           	callstack 0
   223   000001                     ___wmul@multiplier:
   224                           	callstack 0
   225   000001                     isdigit@c:
   226                           	callstack 0
   227   000001                     isspace@c:
   228                           	callstack 0
   229   000001                     fputc@c:
   230                           	callstack 0
   231   000001                     ___aodiv@dividend:
   232                           	callstack 0
   233   000001                     ___aomod@dividend:
   234                           	callstack 0
   235                           
   236                           ; 8 bytes @ 0x0
   237   000001                     	ds	1
   238   000002                     set_bit@cmd:
   239                           	callstack 0
   240                           
   241                           ; 1 bytes @ 0x1
   242   000002                     	ds	1
   243   000003                     ??_lcd_cmd:
   244   000003                     ??_isdigit:
   245   000003                     ??_isspace:
   246   000003                     ___wmul@multiplicand:
   247                           	callstack 0
   248   000003                     fputc@fp:
   249                           	callstack 0
   250                           
   251                           ; 2 bytes @ 0x2
   252   000003                     	ds	1
   253   000004                     lcd_cmd@cmd:
   254                           	callstack 0
   255                           
   256                           ; 1 bytes @ 0x3
   257   000004                     	ds	1
   258   000005                     ??_lcd_init:
   259   000005                     ??_fputc:
   260   000005                     lcd_send_byte@data:
   261                           	callstack 0
   262   000005                     _isspace$953:
   263                           	callstack 0
   264   000005                     ___wmul@product:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x4
   268   000005                     	ds	1
   269   000006                     lcd_init@i:
   270                           	callstack 0
   271   000006                     lcd_send_byte@level:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x5
   275   000006                     	ds	1
   276   000007                     ?_atoi:
   277                           	callstack 0
   278   000007                     lcd_write@col:
   279                           	callstack 0
   280   000007                     atoi@s:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x6
   284   000007                     	ds	1
   285   000008                     lcd_write@str:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x7
   289   000008                     	ds	1
   290   000009                     ??_atoi:
   291   000009                     ___aodiv@divisor:
   292                           	callstack 0
   293   000009                     ___aomod@divisor:
   294                           	callstack 0
   295                           
   296                           ; 8 bytes @ 0x8
   297   000009                     	ds	1
   298   00000A                     lcd_write@end:
   299                           	callstack 0
   300   00000A                     fputs@s:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x9
   304   00000A                     	ds	1
   305   00000B                     lcd_write@lin:
   306                           	callstack 0
   307                           
   308                           ; 1 bytes @ 0xA
   309   00000B                     	ds	1
   310   00000C                     atoi@neg:
   311                           	callstack 0
   312   00000C                     fputs@fp:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0xB
   316   00000C                     	ds	2
   317   00000E                     fputs@c:
   318                           	callstack 0
   319   00000E                     atoi@n:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0xD
   323   00000E                     	ds	1
   324   00000F                     fputs@i:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0xE
   328   00000F                     	ds	2
   329   000011                     ___aodiv@counter:
   330                           	callstack 0
   331   000011                     ___aomod@counter:
   332                           	callstack 0
   333   000011                     pad@fp:
   334                           	callstack 0
   335                           
   336                           ; 2 bytes @ 0x10
   337   000011                     	ds	1
   338   000012                     ___aodiv@sign:
   339                           	callstack 0
   340   000012                     ___aomod@sign:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x11
   344   000012                     	ds	1
   345   000013                     ?_abs:
   346                           	callstack 0
   347   000013                     pad@buf:
   348                           	callstack 0
   349   000013                     abs@a:
   350                           	callstack 0
   351   000013                     ___aodiv@quotient:
   352                           	callstack 0
   353                           
   354                           ; 8 bytes @ 0x12
   355   000013                     	ds	2
   356   000015                     ??_abs:
   357   000015                     pad@p:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x14
   361   000015                     	ds	2
   362   000017                     ??_pad:
   363                           
   364                           ; 1 bytes @ 0x16
   365   000017                     	ds	1
   366   000018                     pad@i:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x17
   370   000018                     	ds	2
   371   00001A                     pad@w:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x19
   375   00001A                     	ds	2
   376   00001C                     dtoa@fp:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x1B
   380   00001C                     	ds	2
   381   00001E                     dtoa@d:
   382                           	callstack 0
   383                           
   384                           ; 8 bytes @ 0x1D
   385   00001E                     	ds	8
   386   000026                     ??_dtoa:
   387                           
   388                           ; 1 bytes @ 0x25
   389   000026                     	ds	8
   390   00002E                     _dtoa$904:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x2D
   394   00002E                     	ds	2
   395   000030                     dtoa@p:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x2F
   399   000030                     	ds	2
   400   000032                     dtoa@w:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x31
   404   000032                     	ds	2
   405   000034                     dtoa@n:
   406                           	callstack 0
   407                           
   408                           ; 8 bytes @ 0x33
   409   000034                     	ds	8
   410   00003C                     dtoa@i:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x3B
   414   00003C                     	ds	2
   415   00003E                     dtoa@s:
   416                           	callstack 0
   417                           
   418                           ; 1 bytes @ 0x3D
   419   00003E                     	ds	1
   420   00003F                     vfpfcnvrt@fp:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x3E
   424   00003F                     	ds	2
   425   000041                     vfpfcnvrt@fmt:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x40
   429   000041                     	ds	2
   430   000043                     vfpfcnvrt@ap:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x42
   434   000043                     	ds	2
   435   000045                     ??_vfpfcnvrt:
   436                           
   437                           ; 1 bytes @ 0x44
   438   000045                     	ds	3
   439   000048                     vfpfcnvrt@convarg:
   440                           	callstack 0
   441                           
   442                           ; 8 bytes @ 0x47
   443   000048                     	ds	8
   444   000050                     vfpfcnvrt@done:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x4F
   448   000050                     	ds	2
   449   000052                     vfpfcnvrt@cp:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x51
   453   000052                     	ds	2
   454   000054                     ?_vfprintf:
   455                           	callstack 0
   456   000054                     vfprintf@fp:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x53
   460   000054                     	ds	2
   461   000056                     vfprintf@fmt:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x55
   465   000056                     	ds	2
   466   000058                     vfprintf@ap:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x57
   470   000058                     	ds	2
   471   00005A                     vfprintf@cfmt:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x59
   475   00005A                     	ds	2
   476   00005C                     ?_sprintf:
   477                           	callstack 0
   478   00005C                     sprintf@s:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x5B
   482   00005C                     	ds	2
   483   00005E                     sprintf@fmt:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x5D
   487   00005E                     	ds	4
   488   000062                     sprintf@ap:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x61
   492   000062                     	ds	2
   493   000064                     sprintf@f:
   494                           	callstack 0
   495                           
   496                           ; 11 bytes @ 0x63
   497   000064                     	ds	11
   498   00006F                     ??_main:
   499                           
   500                           ; 1 bytes @ 0x6E
   501   00006F                     	ds	2
   502                           
   503 ;;
   504 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   505 ;;
   506 ;; *************** function _main *****************
   507 ;; Defined at:
   508 ;;		line 82 in file "Main_counter.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   522 ;;      Params:         0       0       0       0       0       0       0
   523 ;;      Locals:         0       0       0       0       0       0       0
   524 ;;      Temps:          2       0       0       0       0       0       0
   525 ;;      Totals:         2       0       0       0       0       0       0
   526 ;;Total ram usage:        2 bytes
   527 ;; Hardware stack levels required when called: 8
   528 ;; This function calls:
   529 ;;		_config_FOSC
   530 ;;		_config_IO
   531 ;;		_lcd_init
   532 ;;		_lcd_write
   533 ;;		_sprintf
   534 ;; This function is called by:
   535 ;;		Startup code after reset
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text0
   540   0010A0                     __ptext0:
   541                           	callstack 0
   542   0010A0                     _main:
   543                           	callstack 23
   544   0010A0                     
   545                           ;Main_counter.c: 84:     config_FOSC();
   546   0010A0  EC29  F00B         	call	_config_FOSC	;wreg free
   547                           
   548                           ;Main_counter.c: 85:     config_IO();
   549   0010A4  EC24  F00B         	call	_config_IO	;wreg free
   550   0010A8                     
   551                           ;Main_counter.c: 86:     lcd_init();
   552   0010A8  ECC9  F009         	call	_lcd_init	;wreg free
   553   0010AC                     l1817:
   554                           
   555                           ;Main_counter.c: 88:     {;Main_counter.c: 89:         if(PORTBbits.RB0 == 1)
   556   0010AC  A081               	btfss	129,0,c	;volatile
   557   0010AE  EF5B  F008         	goto	u1231
   558   0010B2  EF5D  F008         	goto	u1230
   559   0010B6                     u1231:
   560   0010B6  EF9E  F008         	goto	l1833
   561   0010BA                     u1230:
   562   0010BA                     
   563                           ;Main_counter.c: 90:         {;Main_counter.c: 91:             counter++;
   564   0010BA  4A75               	infsnz	_counter^0,f,c
   565   0010BC  2A76               	incf	(_counter+1)^0,f,c
   566   0010BE                     
   567                           ;Main_counter.c: 92:             lcd_write(1,2,"    COUNTER    ");
   568   0010BE  0E02               	movlw	2
   569   0010C0  6E07               	movwf	lcd_write@col^0,c
   570   0010C2  0E12               	movlw	low STR_1
   571   0010C4  6E08               	movwf	lcd_write@str^0,c
   572   0010C6  0E06               	movlw	high STR_1
   573   0010C8  6E09               	movwf	(lcd_write@str+1)^0,c
   574   0010CA  0E01               	movlw	1
   575   0010CC  EC79  F009         	call	_lcd_write
   576   0010D0                     
   577                           ;Main_counter.c: 93:             sprintf(bufferLCD,
   578   0010D0  0EA0               	movlw	low _bufferLCD
   579   0010D2  6E5C               	movwf	sprintf@s^0,c
   580   0010D4  0E00               	movlw	high _bufferLCD
   581   0010D6  6E5D               	movwf	(sprintf@s+1)^0,c
   582   0010D8  0E32               	movlw	low STR_2
   583   0010DA  6E5E               	movwf	sprintf@fmt^0,c
   584   0010DC  0E06               	movlw	high STR_2
   585   0010DE  6E5F               	movwf	(sprintf@fmt+1)^0,c
   586   0010E0  C075  F060         	movff	_counter,?_sprintf+4
   587   0010E4  C076  F061         	movff	_counter+1,?_sprintf+5
   588   0010E8  EC18  F00A         	call	_sprintf	;wreg free
   589   0010EC                     
   590                           ;Main_counter.c: 96:             lcd_write(2,8,bufferLCD);
   591   0010EC  0E08               	movlw	8
   592   0010EE  6E07               	movwf	lcd_write@col^0,c
   593   0010F0  0EA0               	movlw	low _bufferLCD
   594   0010F2  6E08               	movwf	lcd_write@str^0,c
   595   0010F4  0E00               	movlw	high _bufferLCD
   596   0010F6  6E09               	movwf	(lcd_write@str+1)^0,c
   597   0010F8  0E02               	movlw	2
   598   0010FA  EC79  F009         	call	_lcd_write
   599   0010FE                     
   600                           ;Main_counter.c: 98:             if(counter >= 15) counter = 0;
   601   0010FE  BE76               	btfsc	(_counter+1)^0,7,c
   602   001100  EF8B  F008         	goto	u1241
   603   001104  5076               	movf	(_counter+1)^0,w,c
   604   001106  E109               	bnz	u1240
   605   001108  0E0F               	movlw	15
   606   00110A  5C75               	subwf	_counter^0,w,c
   607   00110C  A0D8               	btfss	status,0,c
   608   00110E  EF8B  F008         	goto	u1241
   609   001112  EF8D  F008         	goto	u1240
   610   001116                     u1241:
   611   001116  EF91  F008         	goto	l1831
   612   00111A                     u1240:
   613   00111A  0E00               	movlw	0
   614   00111C  6E76               	movwf	(_counter+1)^0,c
   615   00111E  0E00               	movlw	0
   616   001120  6E75               	movwf	_counter^0,c
   617   001122                     l1831:
   618                           
   619                           ;Main_counter.c: 99:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   620   001122  0E0B               	movlw	11
   621   001124  6E70               	movwf	(??_main+1)^0,c
   622   001126  0E26               	movlw	38
   623   001128  6E6F               	movwf	??_main^0,c
   624   00112A  0E5E               	movlw	94
   625   00112C                     u1257:
   626   00112C  2EE8               	decfsz	wreg,f,c
   627   00112E  D7FE               	bra	u1257
   628   001130  2E6F               	decfsz	??_main^0,f,c
   629   001132  D7FC               	bra	u1257
   630   001134  2E70               	decfsz	(??_main+1)^0,f,c
   631   001136  D7FA               	bra	u1257
   632                           
   633                           ;Main_counter.c: 100:         }
   634   001138  EF56  F008         	goto	l1817
   635   00113C                     l1833:
   636                           
   637                           ;Main_counter.c: 102:         {;Main_counter.c: 103:             counter = 0;
   638   00113C  0E00               	movlw	0
   639   00113E  6E76               	movwf	(_counter+1)^0,c
   640   001140  0E00               	movlw	0
   641   001142  6E75               	movwf	_counter^0,c
   642   001144                     
   643                           ;Main_counter.c: 104:             lcd_write(1,3,"AULA 1 - LCD:  ");
   644   001144  0E03               	movlw	3
   645   001146  6E07               	movwf	lcd_write@col^0,c
   646   001148  0E22               	movlw	low STR_3
   647   00114A  6E08               	movwf	lcd_write@str^0,c
   648   00114C  0E06               	movlw	high STR_3
   649   00114E  6E09               	movwf	(lcd_write@str+1)^0,c
   650   001150  0E01               	movlw	1
   651   001152  EC79  F009         	call	_lcd_write
   652   001156                     
   653                           ;Main_counter.c: 105:             lcd_write(2,1,"                ");
   654   001156  0E01               	movlw	1
   655   001158  6E07               	movwf	lcd_write@col^0,c
   656   00115A  0E01               	movlw	low STR_4
   657   00115C  6E08               	movwf	lcd_write@str^0,c
   658   00115E  0E06               	movlw	high STR_4
   659   001160  6E09               	movwf	(lcd_write@str+1)^0,c
   660   001162  0E02               	movlw	2
   661   001164  EC79  F009         	call	_lcd_write
   662   001168                     
   663                           ;Main_counter.c: 106:             _delay((unsigned long)((20)*(8000000/4000.0)));
   664   001168  0E34               	movlw	52
   665   00116A  6E6F               	movwf	??_main^0,c
   666   00116C  0EF2               	movlw	242
   667   00116E                     u1267:
   668   00116E  2EE8               	decfsz	wreg,f,c
   669   001170  D7FE               	bra	u1267
   670   001172  2E6F               	decfsz	??_main^0,f,c
   671   001174  D7FC               	bra	u1267
   672   001176  EF56  F008         	goto	l1817
   673   00117A  EF00  F000         	goto	start
   674   00117E                     __end_of_main:
   675                           	callstack 0
   676                           
   677 ;; *************** function _sprintf *****************
   678 ;; Defined at:
   679 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  s               2   91[COMRAM] PTR unsigned char 
   682 ;;		 -> bufferLCD(16), 
   683 ;;  fmt             2   93[COMRAM] PTR const unsigned char 
   684 ;;		 -> STR_2(5), 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  f              11   99[COMRAM] struct _IO_FILE
   687 ;;  ap              2   97[COMRAM] PTR void [1]
   688 ;;		 -> ?_sprintf(2), 
   689 ;;  ret             2    0        int 
   690 ;; Return value:  Size  Location     Type
   691 ;;                  2   91[COMRAM] int 
   692 ;; Registers used:
   693 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   699 ;;      Params:         6       0       0       0       0       0       0
   700 ;;      Locals:        13       0       0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0
   702 ;;      Totals:        19       0       0       0       0       0       0
   703 ;;Total ram usage:       19 bytes
   704 ;; Hardware stack levels used: 1
   705 ;; Hardware stack levels required when called: 7
   706 ;; This function calls:
   707 ;;		_vfprintf
   708 ;; This function is called by:
   709 ;;		_main
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           	psect	text1
   714   001430                     __ptext1:
   715                           	callstack 0
   716   001430                     _sprintf:
   717                           	callstack 23
   718   001430  0E60               	movlw	low (?_sprintf+4)
   719   001432  6E62               	movwf	sprintf@ap^0,c
   720   001434  0E00               	movlw	high (?_sprintf+4)
   721   001436  6E63               	movwf	(sprintf@ap+1)^0,c
   722   001438  C05C  F064         	movff	sprintf@s,sprintf@f
   723   00143C  C05D  F065         	movff	sprintf@s+1,sprintf@f+1
   724   001440  0E00               	movlw	0
   725   001442  6E68               	movwf	(sprintf@f+4)^0,c
   726   001444  0E00               	movlw	0
   727   001446  6E67               	movwf	(sprintf@f+3)^0,c
   728   001448  0E00               	movlw	0
   729   00144A  6E6E               	movwf	(sprintf@f+10)^0,c
   730   00144C  0E00               	movlw	0
   731   00144E  6E6D               	movwf	(sprintf@f+9)^0,c
   732   001450  0E64               	movlw	low sprintf@f
   733   001452  6E54               	movwf	vfprintf@fp^0,c
   734   001454  0E00               	movlw	high sprintf@f
   735   001456  6E55               	movwf	(vfprintf@fp+1)^0,c
   736   001458  C05E  F056         	movff	sprintf@fmt,vfprintf@fmt
   737   00145C  C05F  F057         	movff	sprintf@fmt+1,vfprintf@fmt+1
   738   001460  0E62               	movlw	low sprintf@ap
   739   001462  6E58               	movwf	vfprintf@ap^0,c
   740   001464  0E00               	movlw	high sprintf@ap
   741   001466  6E59               	movwf	(vfprintf@ap+1)^0,c
   742   001468  EC3F  F00A         	call	_vfprintf	;wreg free
   743   00146C  5067               	movf	(sprintf@f+3)^0,w,c
   744   00146E  245C               	addwf	sprintf@s^0,w,c
   745   001470  6ED9               	movwf	fsr2l,c
   746   001472  5068               	movf	(sprintf@f+4)^0,w,c
   747   001474  205D               	addwfc	(sprintf@s+1)^0,w,c
   748   001476  6EDA               	movwf	fsr2h,c
   749   001478  0E00               	movlw	0
   750   00147A  6EDF               	movwf	indf2,c
   751   00147C  0012               	return		;funcret
   752   00147E                     __end_of_sprintf:
   753                           	callstack 0
   754                           
   755 ;; *************** function _vfprintf *****************
   756 ;; Defined at:
   757 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
   760 ;;		 -> sprintf@f(11), 
   761 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
   762 ;;		 -> STR_2(5), 
   763 ;;  ap              2   87[COMRAM] PTR PTR void 
   764 ;;		 -> sprintf@ap(2), 
   765 ;; Auto vars:     Size  Location     Type
   766 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
   767 ;;		 -> STR_2(5), 
   768 ;; Return value:  Size  Location     Type
   769 ;;                  2   83[COMRAM] int 
   770 ;; Registers used:
   771 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : 0/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   777 ;;      Params:         6       0       0       0       0       0       0
   778 ;;      Locals:         2       0       0       0       0       0       0
   779 ;;      Temps:          0       0       0       0       0       0       0
   780 ;;      Totals:         8       0       0       0       0       0       0
   781 ;;Total ram usage:        8 bytes
   782 ;; Hardware stack levels used: 1
   783 ;; Hardware stack levels required when called: 6
   784 ;; This function calls:
   785 ;;		_vfpfcnvrt
   786 ;; This function is called by:
   787 ;;		_sprintf
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text2
   792   00147E                     __ptext2:
   793                           	callstack 0
   794   00147E                     _vfprintf:
   795                           	callstack 23
   796   00147E                     
   797                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   798   00147E  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
   799   001482  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   800                           
   801                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   802   001486  EF53  F00A         	goto	l1731
   803   00148A                     l1729:
   804                           
   805                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   806   00148A  C054  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
   807   00148E  C055  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   808   001492  0E5A               	movlw	low vfprintf@cfmt
   809   001494  6E41               	movwf	vfpfcnvrt@fmt^0,c
   810   001496  0E00               	movlw	high vfprintf@cfmt
   811   001498  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
   812   00149A  C058  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
   813   00149E  C059  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   814   0014A2  EC76  F004         	call	_vfpfcnvrt	;wreg free
   815   0014A6                     l1731:
   816                           
   817                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   818   0014A6  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
   819   0014AA  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   820   0014AE                     	if	0	;tblptru may be non-zero
   821   0014AE                     	endif
   822   0014AE                     	if	0	;tblptru may be non-zero
   823   0014AE                     	endif
   824   0014AE  0008               	tblrd		*
   825   0014B0  50F5               	movf	tablat,w,c
   826   0014B2  0900               	iorlw	0
   827   0014B4  A4D8               	btfss	status,2,c
   828   0014B6  EF5F  F00A         	goto	u1161
   829   0014BA  EF61  F00A         	goto	u1160
   830   0014BE                     u1161:
   831   0014BE  EF45  F00A         	goto	l1729
   832   0014C2                     u1160:
   833   0014C2                     
   834                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   835   0014C2  0E00               	movlw	0
   836   0014C4  6E55               	movwf	(?_vfprintf+1)^0,c
   837   0014C6  0E00               	movlw	0
   838   0014C8  6E54               	movwf	?_vfprintf^0,c
   839   0014CA  0012               	return		;funcret
   840   0014CC                     __end_of_vfprintf:
   841                           	callstack 0
   842                           
   843 ;; *************** function _vfpfcnvrt *****************
   844 ;; Defined at:
   845 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
   848 ;;		 -> sprintf@f(11), 
   849 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
   850 ;;		 -> vfprintf@cfmt(2), 
   851 ;;  ap              2   66[COMRAM] PTR PTR void 
   852 ;;		 -> sprintf@ap(2), 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  convarg         8   71[COMRAM] struct .
   855 ;;  cp              2   81[COMRAM] PTR unsigned char 
   856 ;;		 -> STR_2(5), 
   857 ;;  done            2   79[COMRAM] int 
   858 ;;  i               2    0        int 
   859 ;;  c               1    0        unsigned char 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   869 ;;      Params:         6       0       0       0       0       0       0
   870 ;;      Locals:        12       0       0       0       0       0       0
   871 ;;      Temps:          3       0       0       0       0       0       0
   872 ;;      Totals:        21       0       0       0       0       0       0
   873 ;;Total ram usage:       21 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 5
   876 ;; This function calls:
   877 ;;		_atoi
   878 ;;		_dtoa
   879 ;;		_fputc
   880 ;;		_isdigit
   881 ;; This function is called by:
   882 ;;		_vfprintf
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text3
   887   0008EC                     __ptext3:
   888                           	callstack 0
   889   0008EC                     _vfpfcnvrt:
   890                           	callstack 23
   891   0008EC                     
   892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   893   0008EC  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   894   0008F0  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   895   0008F4  CFDE FFF6          	movff	postinc2,tblptrl
   896   0008F8  CFDD FFF7          	movff	postdec2,tblptrh
   897   0008FC                     	if	0	;tblptru may be non-zero
   898   0008FC                     	endif
   899   0008FC                     	if	0	;tblptru may be non-zero
   900   0008FC                     	endif
   901   0008FC  0008               	tblrd		*
   902   0008FE  50F5               	movf	tablat,w,c
   903   000900  0A25               	xorlw	37
   904   000902  A4D8               	btfss	status,2,c
   905   000904  EF86  F004         	goto	u1081
   906   000908  EF88  F004         	goto	u1080
   907   00090C                     u1081:
   908   00090C  EFAE  F005         	goto	l1709
   909   000910                     u1080:
   910   000910                     
   911                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   912   000910  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   913   000914  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   914   000918  2ADE               	incf	postinc2,f,c
   915   00091A  0E00               	movlw	0
   916   00091C  22DD               	addwfc	postdec2,f,c
   917   00091E                     
   918                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   919   00091E  0E00               	movlw	0
   920   000920  6E72               	movwf	(_width+1)^0,c
   921   000922  0E00               	movlw	0
   922   000924  6E71               	movwf	_width^0,c
   923   000926  C071  F077         	movff	_width,_flags
   924   00092A                     
   925                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   926   00092A  6873               	setf	_prec^0,c
   927   00092C  6874               	setf	(_prec+1)^0,c
   928   00092E                     
   929                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   930   00092E  0E00               	movlw	0
   931   000930  6E51               	movwf	(vfpfcnvrt@done+1)^0,c
   932   000932  0E00               	movlw	0
   933   000934  6E50               	movwf	vfpfcnvrt@done^0,c
   934                           
   935                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   936   000936  EFC7  F004         	goto	l1675
   937   00093A                     l1665:
   938                           
   939                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   940   00093A  8277               	bsf	_flags^0,1,c
   941   00093C                     
   942                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   943   00093C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   944   000940  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   945   000944  2ADE               	incf	postinc2,f,c
   946   000946  0E00               	movlw	0
   947   000948  22DD               	addwfc	postdec2,f,c
   948                           
   949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   950   00094A  EFC7  F004         	goto	l1675
   951   00094E                     l1669:
   952                           
   953                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   954   00094E  0E00               	movlw	0
   955   000950  6E51               	movwf	(vfpfcnvrt@done+1)^0,c
   956   000952  0E01               	movlw	1
   957   000954  6E50               	movwf	vfpfcnvrt@done^0,c
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   960   000956  EFC7  F004         	goto	l1675
   961   00095A                     l1673:
   962   00095A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   963   00095E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   964   000962  CFDE FFF6          	movff	postinc2,tblptrl
   965   000966  CFDD FFF7          	movff	postdec2,tblptrh
   966   00096A                     	if	0	;tblptru may be non-zero
   967   00096A                     	endif
   968   00096A                     	if	0	;tblptru may be non-zero
   969   00096A                     	endif
   970   00096A  0008               	tblrd		*
   971   00096C  50F5               	movf	tablat,w,c
   972   00096E  6E45               	movwf	??_vfpfcnvrt^0,c
   973   000970  6A46               	clrf	(??_vfpfcnvrt+1)^0,c
   974                           
   975                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   976                           ; Switch size 1, requested type "simple"
   977                           ; Number of cases is 1, Range of values is 0 to 0
   978                           ; switch strategies available:
   979                           ; Name         Instructions Cycles
   980                           ; simple_byte            4     3 (average)
   981                           ;	Chosen strategy is simple_byte
   982   000972  5046               	movf	(??_vfpfcnvrt+1)^0,w,c
   983   000974  0A00               	xorlw	0	; case 0
   984   000976  B4D8               	btfsc	status,2,c
   985   000978  EFC0  F004         	goto	l1887
   986   00097C  EFA7  F004         	goto	l1669
   987   000980                     l1887:
   988                           
   989                           ; Switch size 1, requested type "simple"
   990                           ; Number of cases is 1, Range of values is 48 to 48
   991                           ; switch strategies available:
   992                           ; Name         Instructions Cycles
   993                           ; simple_byte            4     3 (average)
   994                           ;	Chosen strategy is simple_byte
   995   000980  5045               	movf	??_vfpfcnvrt^0,w,c
   996   000982  0A30               	xorlw	48	; case 48
   997   000984  B4D8               	btfsc	status,2,c
   998   000986  EF9D  F004         	goto	l1665
   999   00098A  EFA7  F004         	goto	l1669
  1000   00098E                     l1675:
  1001                           
  1002                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  1003   00098E  5050               	movf	vfpfcnvrt@done^0,w,c
  1004   000990  1051               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1005   000992  B4D8               	btfsc	status,2,c
  1006   000994  EFCE  F004         	goto	u1091
  1007   000998  EFD0  F004         	goto	u1090
  1008   00099C                     u1091:
  1009   00099C  EFAD  F004         	goto	l1673
  1010   0009A0                     u1090:
  1011   0009A0                     
  1012                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
  1013   0009A0  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1014   0009A4  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1015   0009A8  CFDE FFF6          	movff	postinc2,tblptrl
  1016   0009AC  CFDD FFF7          	movff	postdec2,tblptrh
  1017   0009B0                     	if	0	;tblptru may be non-zero
  1018   0009B0                     	endif
  1019   0009B0                     	if	0	;tblptru may be non-zero
  1020   0009B0                     	endif
  1021   0009B0  0008               	tblrd		*
  1022   0009B2  50F5               	movf	tablat,w,c
  1023   0009B4  0A2A               	xorlw	42
  1024   0009B6  A4D8               	btfss	status,2,c
  1025   0009B8  EFE0  F004         	goto	u1101
  1026   0009BC  EFE2  F004         	goto	u1100
  1027   0009C0                     u1101:
  1028   0009C0  EF0B  F005         	goto	l1685
  1029   0009C4                     u1100:
  1030   0009C4                     
  1031                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
  1032   0009C4  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1033   0009C8  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1034   0009CC  2ADE               	incf	postinc2,f,c
  1035   0009CE  0E00               	movlw	0
  1036   0009D0  22DD               	addwfc	postdec2,f,c
  1037                           
  1038                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1039   0009D2  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1040   0009D6  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1041   0009DA  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1042   0009DE  0E02               	movlw	2
  1043   0009E0  26DE               	addwf	postinc2,f,c
  1044   0009E2  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1045   0009E6  0E00               	movlw	0
  1046   0009E8  22DD               	addwfc	postdec2,f,c
  1047   0009EA  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1048   0009EE  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1049   0009F2  CFDE F071          	movff	postinc2,_width
  1050   0009F6  CFDD F072          	movff	postdec2,_width+1
  1051   0009FA                     
  1052                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  1053   0009FA  BE72               	btfsc	(_width+1)^0,7,c
  1054   0009FC  EF04  F005         	goto	u1110
  1055   000A00  EF02  F005         	goto	u1111
  1056   000A04                     u1111:
  1057   000A04  EF3E  F005         	goto	l1693
  1058   000A08                     u1110:
  1059   000A08                     
  1060                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  1061   000A08  8077               	bsf	_flags^0,0,c
  1062                           
  1063                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  1064   000A0A  6C71               	negf	_width^0,c
  1065   000A0C  1E72               	comf	(_width+1)^0,f,c
  1066   000A0E  B0D8               	btfsc	status,0,c
  1067   000A10  2A72               	incf	(_width+1)^0,f,c
  1068   000A12  EF3E  F005         	goto	l1693
  1069   000A16                     l1685:
  1070                           
  1071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1072   000A16  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1073   000A1A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1074   000A1E  CFDE F007          	movff	postinc2,atoi@s
  1075   000A22  CFDD F008          	movff	postdec2,atoi@s+1
  1076   000A26  EC39  F007         	call	_atoi	;wreg free
  1077   000A2A  C007  F071         	movff	?_atoi,_width
  1078   000A2E  C008  F072         	movff	?_atoi+1,_width+1
  1079                           
  1080                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1081   000A32  EF22  F005         	goto	l1691
  1082   000A36                     l1687:
  1083                           
  1084                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1085   000A36  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1086   000A3A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1087   000A3E  2ADE               	incf	postinc2,f,c
  1088   000A40  0E00               	movlw	0
  1089   000A42  22DD               	addwfc	postdec2,f,c
  1090   000A44                     l1691:
  1091   000A44  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1092   000A48  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1093   000A4C  CFDE FFF6          	movff	postinc2,tblptrl
  1094   000A50  CFDD FFF7          	movff	postdec2,tblptrh
  1095   000A54                     	if	0	;tblptru may be non-zero
  1096   000A54                     	endif
  1097   000A54                     	if	0	;tblptru may be non-zero
  1098   000A54                     	endif
  1099   000A54  0008               	tblrd		*
  1100   000A56  CFF5 F045          	movff	tablat,??_vfpfcnvrt
  1101   000A5A  0ED0               	movlw	208
  1102   000A5C  2445               	addwf	??_vfpfcnvrt^0,w,c
  1103   000A5E  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1104   000A60  6A47               	clrf	(??_vfpfcnvrt+2)^0,c
  1105   000A62  0EFF               	movlw	255
  1106   000A64  2247               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1107   000A66  5047               	movf	(??_vfpfcnvrt+2)^0,w,c
  1108   000A68  E109               	bnz	u1120
  1109   000A6A  0E0A               	movlw	10
  1110   000A6C  5C46               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1111   000A6E  A0D8               	btfss	status,0,c
  1112   000A70  EF3C  F005         	goto	u1121
  1113   000A74  EF3E  F005         	goto	u1120
  1114   000A78                     u1121:
  1115   000A78  EF1B  F005         	goto	l1687
  1116   000A7C                     u1120:
  1117   000A7C                     l1693:
  1118                           
  1119                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1120   000A7C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1121   000A80  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1122   000A84  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  1123   000A88  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  1124   000A8C                     
  1125                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1126   000A8C  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1127   000A90  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1128   000A94                     	if	0	;tblptru may be non-zero
  1129   000A94                     	endif
  1130   000A94                     	if	0	;tblptru may be non-zero
  1131   000A94                     	endif
  1132   000A94  0008               	tblrd		*
  1133   000A96  50F5               	movf	tablat,w,c
  1134   000A98  0A64               	xorlw	100
  1135   000A9A  B4D8               	btfsc	status,2,c
  1136   000A9C  EF52  F005         	goto	u1131
  1137   000AA0  EF54  F005         	goto	u1130
  1138   000AA4                     u1131:
  1139   000AA4  EF62  F005         	goto	l1699
  1140   000AA8                     u1130:
  1141   000AA8  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1142   000AAC  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1143   000AB0                     	if	0	;tblptru may be non-zero
  1144   000AB0                     	endif
  1145   000AB0                     	if	0	;tblptru may be non-zero
  1146   000AB0                     	endif
  1147   000AB0  0008               	tblrd		*
  1148   000AB2  50F5               	movf	tablat,w,c
  1149   000AB4  0A69               	xorlw	105
  1150   000AB6  A4D8               	btfss	status,2,c
  1151   000AB8  EF60  F005         	goto	u1141
  1152   000ABC  EF62  F005         	goto	u1140
  1153   000AC0                     u1141:
  1154   000AC0  EFA5  F005         	goto	l1705
  1155   000AC4                     u1140:
  1156   000AC4                     l1699:
  1157                           
  1158                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1159   000AC4  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1160   000AC8  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1161   000ACC  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1162   000AD0  0E02               	movlw	2
  1163   000AD2  26DE               	addwf	postinc2,f,c
  1164   000AD4  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1165   000AD8  0E00               	movlw	0
  1166   000ADA  22DD               	addwfc	postdec2,f,c
  1167   000ADC  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1168   000AE0  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1169   000AE4  CFDE F048          	movff	postinc2,vfpfcnvrt@convarg
  1170   000AE8  CFDD F049          	movff	postdec2,vfpfcnvrt@convarg+1
  1171   000AEC  0E00               	movlw	0
  1172   000AEE  BE49               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1173   000AF0  0EFF               	movlw	-1
  1174   000AF2  6E4A               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1175   000AF4  6E4B               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1176   000AF6  6E4C               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1177   000AF8  6E4D               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1178   000AFA  6E4E               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1179   000AFC  6E4F               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1180                           
  1181                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1182   000AFE  0E01               	movlw	1
  1183   000B00  2452               	addwf	vfpfcnvrt@cp^0,w,c
  1184   000B02  6E45               	movwf	??_vfpfcnvrt^0,c
  1185   000B04  0E00               	movlw	0
  1186   000B06  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1187   000B08  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1188   000B0A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1189   000B0E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1190   000B12  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1191   000B16  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1192   000B1A                     
  1193                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1194   000B1A  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1195   000B1E  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1196   000B22  C048  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1197   000B26  C049  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1198   000B2A  C04A  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1199   000B2E  C04B  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1200   000B32  C04C  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1201   000B36  C04D  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1202   000B3A  C04E  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1203   000B3E  C04F  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1204   000B42  EC1C  F003         	call	_dtoa	;wreg free
  1205   000B46  EFC2  F005         	goto	l838
  1206   000B4A                     l1705:
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1209   000B4A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1210   000B4E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1211   000B52  2ADE               	incf	postinc2,f,c
  1212   000B54  0E00               	movlw	0
  1213   000B56  22DD               	addwfc	postdec2,f,c
  1214   000B58  EFC2  F005         	goto	l838
  1215   000B5C                     l1709:
  1216                           
  1217                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1218   000B5C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1219   000B60  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1220   000B64  CFDE FFF6          	movff	postinc2,tblptrl
  1221   000B68  CFDD FFF7          	movff	postdec2,tblptrh
  1222   000B6C                     	if	0	;tblptru may be non-zero
  1223   000B6C                     	endif
  1224   000B6C                     	if	0	;tblptru may be non-zero
  1225   000B6C                     	endif
  1226   000B6C  0008               	tblrd		*
  1227   000B6E  50F5               	movf	tablat,w,c
  1228   000B70  6E01               	movwf	fputc@c^0,c
  1229   000B72  6A02               	clrf	(fputc@c+1)^0,c
  1230   000B74  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1231   000B78  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1232   000B7C  ECBF  F008         	call	_fputc	;wreg free
  1233   000B80  EFA5  F005         	goto	l1705
  1234   000B84                     l838:
  1235   000B84  0012               	return		;funcret
  1236   000B86                     __end_of_vfpfcnvrt:
  1237                           	callstack 0
  1238                           
  1239 ;; *************** function _dtoa *****************
  1240 ;; Defined at:
  1241 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1244 ;;		 -> sprintf@f(11), 
  1245 ;;  d               8   29[COMRAM] long long 
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;  n               8   51[COMRAM] long long 
  1248 ;;  i               2   59[COMRAM] int 
  1249 ;;  w               2   49[COMRAM] int 
  1250 ;;  p               2   47[COMRAM] int 
  1251 ;;  s               1   61[COMRAM] unsigned char 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1261 ;;      Params:        10       0       0       0       0       0       0
  1262 ;;      Locals:        17       0       0       0       0       0       0
  1263 ;;      Temps:          8       0       0       0       0       0       0
  1264 ;;      Totals:        35       0       0       0       0       0       0
  1265 ;;Total ram usage:       35 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; Hardware stack levels required when called: 4
  1268 ;; This function calls:
  1269 ;;		___aodiv
  1270 ;;		___aomod
  1271 ;;		_abs
  1272 ;;		_pad
  1273 ;; This function is called by:
  1274 ;;		_vfpfcnvrt
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text4
  1279   000638                     __ptext4:
  1280                           	callstack 0
  1281   000638                     _dtoa:
  1282                           	callstack 23
  1283   000638                     
  1284                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1285   000638  C01E  F034         	movff	dtoa@d,dtoa@n
  1286   00063C  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  1287   000640  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  1288   000644  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  1289   000648  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  1290   00064C  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  1291   000650  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  1292   000654  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  1293   000658                     
  1294                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1295   000658  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  1296   00065A  EF31  F003         	goto	u911
  1297   00065E  EF34  F003         	goto	u910
  1298   000662                     u911:
  1299   000662  0E01               	movlw	1
  1300   000664  EF35  F003         	goto	u920
  1301   000668                     u910:
  1302   000668  0E00               	movlw	0
  1303   00066A                     u920:
  1304   00066A  6E3E               	movwf	dtoa@s^0,c
  1305   00066C                     
  1306                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1307   00066C  503E               	movf	dtoa@s^0,w,c
  1308   00066E  B4D8               	btfsc	status,2,c
  1309   000670  EF3C  F003         	goto	u931
  1310   000674  EF3E  F003         	goto	u930
  1311   000678                     u931:
  1312   000678  EF4E  F003         	goto	l1551
  1313   00067C                     u930:
  1314   00067C                     
  1315                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1316   00067C  1E3B               	comf	(dtoa@n+7)^0,f,c
  1317   00067E  1E3A               	comf	(dtoa@n+6)^0,f,c
  1318   000680  1E39               	comf	(dtoa@n+5)^0,f,c
  1319   000682  1E38               	comf	(dtoa@n+4)^0,f,c
  1320   000684  1E37               	comf	(dtoa@n+3)^0,f,c
  1321   000686  1E36               	comf	(dtoa@n+2)^0,f,c
  1322   000688  1E35               	comf	(dtoa@n+1)^0,f,c
  1323   00068A  6C34               	negf	dtoa@n^0,c
  1324   00068C  0E00               	movlw	0
  1325   00068E  2235               	addwfc	(dtoa@n+1)^0,f,c
  1326   000690  2236               	addwfc	(dtoa@n+2)^0,f,c
  1327   000692  2237               	addwfc	(dtoa@n+3)^0,f,c
  1328   000694  2238               	addwfc	(dtoa@n+4)^0,f,c
  1329   000696  2239               	addwfc	(dtoa@n+5)^0,f,c
  1330   000698  223A               	addwfc	(dtoa@n+6)^0,f,c
  1331   00069A  223B               	addwfc	(dtoa@n+7)^0,f,c
  1332   00069C                     l1551:
  1333                           
  1334                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 458:     if (!(pr
      +                          ec < 0)) {
  1335   00069C  BE74               	btfsc	(_prec+1)^0,7,c
  1336   00069E  EF53  F003         	goto	u941
  1337   0006A2  EF55  F003         	goto	u940
  1338   0006A6                     u941:
  1339   0006A6  EF56  F003         	goto	l1555
  1340   0006AA                     u940:
  1341   0006AA                     
  1342                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 459:         flag
      +                          s &= ~(1 << 1);
  1343   0006AA  9277               	bcf	_flags^0,1,c
  1344   0006AC                     l1555:
  1345                           
  1346                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1347   0006AC  BE74               	btfsc	(_prec+1)^0,7,c
  1348   0006AE  EF63  F003         	goto	u950
  1349   0006B2  5074               	movf	(_prec+1)^0,w,c
  1350   0006B4  E106               	bnz	u951
  1351   0006B6  0473               	decf	_prec^0,w,c
  1352   0006B8  B0D8               	btfsc	status,0,c
  1353   0006BA  EF61  F003         	goto	u951
  1354   0006BE  EF63  F003         	goto	u950
  1355   0006C2                     u951:
  1356   0006C2  EF69  F003         	goto	l800
  1357   0006C6                     u950:
  1358   0006C6  0E00               	movlw	0
  1359   0006C8  6E31               	movwf	(dtoa@p+1)^0,c
  1360   0006CA  0E01               	movlw	1
  1361   0006CC  6E30               	movwf	dtoa@p^0,c
  1362   0006CE  EF6D  F003         	goto	l802
  1363   0006D2                     l800:
  1364   0006D2  C073  F030         	movff	_prec,dtoa@p
  1365   0006D6  C074  F031         	movff	_prec+1,dtoa@p+1
  1366   0006DA                     l802:
  1367                           
  1368                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1369   0006DA  C071  F032         	movff	_width,dtoa@w
  1370   0006DE  C072  F033         	movff	_width+1,dtoa@w+1
  1371   0006E2                     
  1372                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1373   0006E2  503E               	movf	dtoa@s^0,w,c
  1374   0006E4  B4D8               	btfsc	status,2,c
  1375   0006E6  EF77  F003         	goto	u961
  1376   0006EA  EF79  F003         	goto	u960
  1377   0006EE                     u961:
  1378   0006EE  EF90  F003         	goto	l803
  1379   0006F2                     u960:
  1380   0006F2                     
  1381                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1382   0006F2  0632               	decf	dtoa@w^0,f,c
  1383   0006F4  A0D8               	btfss	status,0,c
  1384   0006F6  0633               	decf	(dtoa@w+1)^0,f,c
  1385   0006F8                     
  1386                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1387   0006F8  503E               	movf	dtoa@s^0,w,c
  1388   0006FA  A4D8               	btfss	status,2,c
  1389   0006FC  EF82  F003         	goto	u971
  1390   000700  EF84  F003         	goto	u970
  1391   000704                     u971:
  1392   000704  EF8A  F003         	goto	l1567
  1393   000708                     u970:
  1394   000708  0E00               	movlw	0
  1395   00070A  6E2F               	movwf	(_dtoa$904+1)^0,c
  1396   00070C  0E2B               	movlw	43
  1397   00070E  6E2E               	movwf	_dtoa$904^0,c
  1398   000710  EF8E  F003         	goto	l1569
  1399   000714                     l1567:
  1400   000714  0E00               	movlw	0
  1401   000716  6E2F               	movwf	(_dtoa$904+1)^0,c
  1402   000718  0E2D               	movlw	45
  1403   00071A  6E2E               	movwf	_dtoa$904^0,c
  1404   00071C                     l1569:
  1405   00071C  C02E  F03E         	movff	_dtoa$904,dtoa@s
  1406   000720                     l803:
  1407                           
  1408                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1409   000720  0E00               	movlw	0
  1410   000722  6E3D               	movwf	(dtoa@i+1)^0,c
  1411   000724  0E1F               	movlw	31
  1412   000726  6E3C               	movwf	dtoa@i^0,c
  1413   000728                     
  1414                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1415   000728  0E00               	movlw	0
  1416   00072A  0100               	movlb	0	; () banked
  1417   00072C  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1418                           
  1419                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1420   00072E  EF15  F004         	goto	l1583
  1421   000732                     l1573:
  1422                           
  1423                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1424   000732  063C               	decf	dtoa@i^0,f,c
  1425   000734  A0D8               	btfss	status,0,c
  1426   000736  063D               	decf	(dtoa@i+1)^0,f,c
  1427   000738                     
  1428                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1429   000738  0E80               	movlw	low _dbuf
  1430   00073A  243C               	addwf	dtoa@i^0,w,c
  1431   00073C  6ED9               	movwf	fsr2l,c
  1432   00073E  0E00               	movlw	high _dbuf
  1433   000740  203D               	addwfc	(dtoa@i+1)^0,w,c
  1434   000742  6EDA               	movwf	fsr2h,c
  1435   000744  C034  F001         	movff	dtoa@n,___aomod@dividend
  1436   000748  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1437   00074C  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1438   000750  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1439   000754  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1440   000758  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1441   00075C  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1442   000760  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1443   000764  0E0A               	movlw	10
  1444   000766  6E09               	movwf	___aomod@divisor^0,c
  1445   000768  0E00               	movlw	0
  1446   00076A  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1447   00076C  0E00               	movlw	0
  1448   00076E  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1449   000770  0E00               	movlw	0
  1450   000772  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1451   000774  0E00               	movlw	0
  1452   000776  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1453   000778  0E00               	movlw	0
  1454   00077A  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1455   00077C  0E00               	movlw	0
  1456   00077E  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1457   000780  0E00               	movlw	0
  1458   000782  6E10               	movwf	(___aomod@divisor+7)^0,c
  1459   000784  EC87  F006         	call	___aomod	;wreg free
  1460   000788  C001  F026         	movff	?___aomod,??_dtoa
  1461   00078C  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1462   000790  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1463   000794  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1464   000798  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1465   00079C  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1466   0007A0  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1467   0007A4  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1468   0007A8  C026  F013         	movff	??_dtoa,abs@a
  1469   0007AC  C027  F014         	movff	??_dtoa+1,abs@a+1
  1470   0007B0  ECAB  F00A         	call	_abs	;wreg free
  1471   0007B4  5013               	movf	?_abs^0,w,c
  1472   0007B6  0F30               	addlw	48
  1473   0007B8  6EDF               	movwf	indf2,c
  1474   0007BA                     
  1475                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1476   0007BA  0630               	decf	dtoa@p^0,f,c
  1477   0007BC  A0D8               	btfss	status,0,c
  1478   0007BE  0631               	decf	(dtoa@p+1)^0,f,c
  1479   0007C0                     
  1480                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1481   0007C0  0632               	decf	dtoa@w^0,f,c
  1482   0007C2  A0D8               	btfss	status,0,c
  1483   0007C4  0633               	decf	(dtoa@w+1)^0,f,c
  1484   0007C6                     
  1485                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1486   0007C6  C034  F001         	movff	dtoa@n,___aodiv@dividend
  1487   0007CA  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1488   0007CE  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1489   0007D2  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1490   0007D6  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1491   0007DA  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1492   0007DE  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1493   0007E2  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1494   0007E6  0E0A               	movlw	10
  1495   0007E8  6E09               	movwf	___aodiv@divisor^0,c
  1496   0007EA  0E00               	movlw	0
  1497   0007EC  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1498   0007EE  0E00               	movlw	0
  1499   0007F0  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1500   0007F2  0E00               	movlw	0
  1501   0007F4  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1502   0007F6  0E00               	movlw	0
  1503   0007F8  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1504   0007FA  0E00               	movlw	0
  1505   0007FC  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1506   0007FE  0E00               	movlw	0
  1507   000800  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1508   000802  0E00               	movlw	0
  1509   000804  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1510   000806  ECC3  F005         	call	___aodiv	;wreg free
  1511   00080A  C001  F034         	movff	?___aodiv,dtoa@n
  1512   00080E  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  1513   000812  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  1514   000816  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  1515   00081A  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  1516   00081E  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  1517   000822  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  1518   000826  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  1519   00082A                     l1583:
  1520                           
  1521                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1522   00082A  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  1523   00082C  EF20  F004         	goto	u981
  1524   000830  503D               	movf	(dtoa@i+1)^0,w,c
  1525   000832  E108               	bnz	u980
  1526   000834  043C               	decf	dtoa@i^0,w,c
  1527   000836  A0D8               	btfss	status,0,c
  1528   000838  EF20  F004         	goto	u981
  1529   00083C  EF22  F004         	goto	u980
  1530   000840                     u981:
  1531   000840  EF52  F004         	goto	l1593
  1532   000844                     u980:
  1533   000844  5034               	movf	dtoa@n^0,w,c
  1534   000846  1035               	iorwf	(dtoa@n+1)^0,w,c
  1535   000848  1036               	iorwf	(dtoa@n+2)^0,w,c
  1536   00084A  1037               	iorwf	(dtoa@n+3)^0,w,c
  1537   00084C  1038               	iorwf	(dtoa@n+4)^0,w,c
  1538   00084E  1039               	iorwf	(dtoa@n+5)^0,w,c
  1539   000850  103A               	iorwf	(dtoa@n+6)^0,w,c
  1540   000852  103B               	iorwf	(dtoa@n+7)^0,w,c
  1541   000854  A4D8               	btfss	status,2,c
  1542   000856  EF2F  F004         	goto	u991
  1543   00085A  EF31  F004         	goto	u990
  1544   00085E                     u991:
  1545   00085E  EF99  F003         	goto	l1573
  1546   000862                     u990:
  1547   000862  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1548   000864  EF3E  F004         	goto	u1000
  1549   000868  5031               	movf	(dtoa@p+1)^0,w,c
  1550   00086A  E106               	bnz	u1001
  1551   00086C  0430               	decf	dtoa@p^0,w,c
  1552   00086E  B0D8               	btfsc	status,0,c
  1553   000870  EF3C  F004         	goto	u1001
  1554   000874  EF3E  F004         	goto	u1000
  1555   000878                     u1001:
  1556   000878  EF99  F003         	goto	l1573
  1557   00087C                     u1000:
  1558   00087C  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1559   00087E  EF49  F004         	goto	u1011
  1560   000882  5033               	movf	(dtoa@w+1)^0,w,c
  1561   000884  E108               	bnz	u1010
  1562   000886  0432               	decf	dtoa@w^0,w,c
  1563   000888  A0D8               	btfss	status,0,c
  1564   00088A  EF49  F004         	goto	u1011
  1565   00088E  EF4B  F004         	goto	u1010
  1566   000892                     u1011:
  1567   000892  EF52  F004         	goto	l1593
  1568   000896                     u1010:
  1569   000896  B277               	btfsc	_flags^0,1,c
  1570   000898  EF50  F004         	goto	u1021
  1571   00089C  EF52  F004         	goto	u1020
  1572   0008A0                     u1021:
  1573   0008A0  EF99  F003         	goto	l1573
  1574   0008A4                     u1020:
  1575   0008A4                     l1593:
  1576                           
  1577                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1578   0008A4  503E               	movf	dtoa@s^0,w,c
  1579   0008A6  B4D8               	btfsc	status,2,c
  1580   0008A8  EF58  F004         	goto	u1031
  1581   0008AC  EF5A  F004         	goto	u1030
  1582   0008B0                     u1031:
  1583   0008B0  EF65  F004         	goto	l1599
  1584   0008B4                     u1030:
  1585   0008B4                     
  1586                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1587   0008B4  063C               	decf	dtoa@i^0,f,c
  1588   0008B6  A0D8               	btfss	status,0,c
  1589   0008B8  063D               	decf	(dtoa@i+1)^0,f,c
  1590   0008BA                     
  1591                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1592   0008BA  0E80               	movlw	low _dbuf
  1593   0008BC  243C               	addwf	dtoa@i^0,w,c
  1594   0008BE  6ED9               	movwf	fsr2l,c
  1595   0008C0  0E00               	movlw	high _dbuf
  1596   0008C2  203D               	addwfc	(dtoa@i+1)^0,w,c
  1597   0008C4  6EDA               	movwf	fsr2h,c
  1598   0008C6  C03E  FFDF         	movff	dtoa@s,indf2
  1599   0008CA                     l1599:
  1600                           
  1601                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1602   0008CA  C01C  F011         	movff	dtoa@fp,pad@fp
  1603   0008CE  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1604   0008D2  0E80               	movlw	low _dbuf
  1605   0008D4  243C               	addwf	dtoa@i^0,w,c
  1606   0008D6  6E13               	movwf	pad@buf^0,c
  1607   0008D8  0E00               	movlw	high _dbuf
  1608   0008DA  203D               	addwfc	(dtoa@i+1)^0,w,c
  1609   0008DC  6E14               	movwf	(pad@buf+1)^0,c
  1610   0008DE  C032  F015         	movff	dtoa@w,pad@p
  1611   0008E2  C033  F016         	movff	dtoa@w+1,pad@p+1
  1612   0008E6  EC24  F009         	call	_pad	;wreg free
  1613   0008EA  0012               	return		;funcret
  1614   0008EC                     __end_of_dtoa:
  1615                           	callstack 0
  1616                           
  1617 ;; *************** function _pad *****************
  1618 ;; Defined at:
  1619 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1622 ;;		 -> sprintf@f(11), 
  1623 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1624 ;;		 -> dbuf(32), 
  1625 ;;  p               2   20[COMRAM] int 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  w               2   25[COMRAM] int 
  1628 ;;  i               2   23[COMRAM] int 
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1638 ;;      Params:         6       0       0       0       0       0       0
  1639 ;;      Locals:         4       0       0       0       0       0       0
  1640 ;;      Temps:          1       0       0       0       0       0       0
  1641 ;;      Totals:        11       0       0       0       0       0       0
  1642 ;;Total ram usage:       11 bytes
  1643 ;; Hardware stack levels used: 1
  1644 ;; Hardware stack levels required when called: 3
  1645 ;; This function calls:
  1646 ;;		_fputc
  1647 ;;		_fputs
  1648 ;; This function is called by:
  1649 ;;		_dtoa
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text5
  1654   001248                     __ptext5:
  1655                           	callstack 0
  1656   001248                     _pad:
  1657                           	callstack 23
  1658   001248                     
  1659                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1660   001248  A077               	btfss	_flags^0,0,c
  1661   00124A  EF29  F009         	goto	u811
  1662   00124E  EF2B  F009         	goto	u810
  1663   001252                     u811:
  1664   001252  EF35  F009         	goto	l1497
  1665   001256                     u810:
  1666   001256                     
  1667                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1668   001256  C013  F00A         	movff	pad@buf,fputs@s
  1669   00125A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1670   00125E  C011  F00C         	movff	pad@fp,fputs@fp
  1671   001262  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1672   001266  EC89  F00A         	call	_fputs	;wreg free
  1673   00126A                     l1497:
  1674                           
  1675                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1676   00126A  BE16               	btfsc	(pad@p+1)^0,7,c
  1677   00126C  EF3A  F009         	goto	u821
  1678   001270  EF3C  F009         	goto	u820
  1679   001274                     u821:
  1680   001274  EF42  F009         	goto	l1501
  1681   001278                     u820:
  1682   001278  C015  F01A         	movff	pad@p,pad@w
  1683   00127C  C016  F01B         	movff	pad@p+1,pad@w+1
  1684   001280  EF46  F009         	goto	l789
  1685   001284                     l1501:
  1686   001284  0E00               	movlw	0
  1687   001286  6E1B               	movwf	(pad@w+1)^0,c
  1688   001288  0E00               	movlw	0
  1689   00128A  6E1A               	movwf	pad@w^0,c
  1690   00128C                     l789:
  1691                           
  1692                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1693   00128C  0E00               	movlw	0
  1694   00128E  6E19               	movwf	(pad@i+1)^0,c
  1695   001290  0E00               	movlw	0
  1696   001292  6E18               	movwf	pad@i^0,c
  1697                           
  1698                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1699   001294  EF58  F009         	goto	l1507
  1700   001298                     l1503:
  1701                           
  1702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1703   001298  0E00               	movlw	0
  1704   00129A  6E02               	movwf	(fputc@c+1)^0,c
  1705   00129C  0E20               	movlw	32
  1706   00129E  6E01               	movwf	fputc@c^0,c
  1707   0012A0  C011  F003         	movff	pad@fp,fputc@fp
  1708   0012A4  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1709   0012A8  ECBF  F008         	call	_fputc	;wreg free
  1710   0012AC                     
  1711                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1712   0012AC  4A18               	infsnz	pad@i^0,f,c
  1713   0012AE  2A19               	incf	(pad@i+1)^0,f,c
  1714   0012B0                     l1507:
  1715                           
  1716                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1717   0012B0  501A               	movf	pad@w^0,w,c
  1718   0012B2  5C18               	subwf	pad@i^0,w,c
  1719   0012B4  5019               	movf	(pad@i+1)^0,w,c
  1720   0012B6  0A80               	xorlw	128
  1721   0012B8  6E17               	movwf	??_pad^0,c
  1722   0012BA  501B               	movf	(pad@w+1)^0,w,c
  1723   0012BC  0A80               	xorlw	128
  1724   0012BE  5817               	subwfb	??_pad^0,w,c
  1725   0012C0  A0D8               	btfss	status,0,c
  1726   0012C2  EF65  F009         	goto	u831
  1727   0012C6  EF67  F009         	goto	u830
  1728   0012CA                     u831:
  1729   0012CA  EF4C  F009         	goto	l1503
  1730   0012CE                     u830:
  1731   0012CE                     
  1732                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1733   0012CE  B077               	btfsc	_flags^0,0,c
  1734   0012D0  EF6C  F009         	goto	u841
  1735   0012D4  EF6E  F009         	goto	u840
  1736   0012D8                     u841:
  1737   0012D8  EF78  F009         	goto	l794
  1738   0012DC                     u840:
  1739   0012DC                     
  1740                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1741   0012DC  C013  F00A         	movff	pad@buf,fputs@s
  1742   0012E0  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1743   0012E4  C011  F00C         	movff	pad@fp,fputs@fp
  1744   0012E8  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1745   0012EC  EC89  F00A         	call	_fputs	;wreg free
  1746   0012F0                     l794:
  1747   0012F0  0012               	return		;funcret
  1748   0012F2                     __end_of_pad:
  1749                           	callstack 0
  1750                           
  1751 ;; *************** function _fputs *****************
  1752 ;; Defined at:
  1753 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1756 ;;		 -> dbuf(32), 
  1757 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1758 ;;		 -> sprintf@f(11), 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  i               2   14[COMRAM] int 
  1761 ;;  c               1   13[COMRAM] unsigned char 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  2    9[COMRAM] int 
  1764 ;; Registers used:
  1765 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1771 ;;      Params:         4       0       0       0       0       0       0
  1772 ;;      Locals:         3       0       0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0
  1774 ;;      Totals:         7       0       0       0       0       0       0
  1775 ;;Total ram usage:        7 bytes
  1776 ;; Hardware stack levels used: 1
  1777 ;; Hardware stack levels required when called: 2
  1778 ;; This function calls:
  1779 ;;		_fputc
  1780 ;; This function is called by:
  1781 ;;		_pad
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text6
  1786   001512                     __ptext6:
  1787                           	callstack 0
  1788   001512                     _fputs:
  1789                           	callstack 23
  1790   001512  0E00               	movlw	0
  1791   001514  6E10               	movwf	(fputs@i+1)^0,c
  1792   001516  0E00               	movlw	0
  1793   001518  6E0F               	movwf	fputs@i^0,c
  1794   00151A  EF9A  F00A         	goto	l1405
  1795   00151E                     l1401:
  1796   00151E  C00E  F001         	movff	fputs@c,fputc@c
  1797   001522  6A02               	clrf	(fputc@c+1)^0,c
  1798   001524  C00C  F003         	movff	fputs@fp,fputc@fp
  1799   001528  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1800   00152C  ECBF  F008         	call	_fputc	;wreg free
  1801   001530  4A0F               	infsnz	fputs@i^0,f,c
  1802   001532  2A10               	incf	(fputs@i+1)^0,f,c
  1803   001534                     l1405:
  1804   001534  500F               	movf	fputs@i^0,w,c
  1805   001536  240A               	addwf	fputs@s^0,w,c
  1806   001538  6ED9               	movwf	fsr2l,c
  1807   00153A  5010               	movf	(fputs@i+1)^0,w,c
  1808   00153C  200B               	addwfc	(fputs@s+1)^0,w,c
  1809   00153E  6EDA               	movwf	fsr2h,c
  1810   001540  50DF               	movf	indf2,w,c
  1811   001542  6E0E               	movwf	fputs@c^0,c
  1812   001544  500E               	movf	fputs@c^0,w,c
  1813   001546  A4D8               	btfss	status,2,c
  1814   001548  EFA8  F00A         	goto	u671
  1815   00154C  EFAA  F00A         	goto	u670
  1816   001550                     u671:
  1817   001550  EF8F  F00A         	goto	l1401
  1818   001554                     u670:
  1819   001554  0012               	return		;funcret
  1820   001556                     __end_of_fputs:
  1821                           	callstack 0
  1822                           
  1823 ;; *************** function _fputc *****************
  1824 ;; Defined at:
  1825 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  c               2    0[COMRAM] int 
  1828 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1829 ;;		 -> sprintf@f(11), 
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  2    0[COMRAM] int 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1841 ;;      Params:         4       0       0       0       0       0       0
  1842 ;;      Locals:         0       0       0       0       0       0       0
  1843 ;;      Temps:          5       0       0       0       0       0       0
  1844 ;;      Totals:         9       0       0       0       0       0       0
  1845 ;;Total ram usage:        9 bytes
  1846 ;; Hardware stack levels used: 1
  1847 ;; Hardware stack levels required when called: 1
  1848 ;; This function calls:
  1849 ;;		_putch
  1850 ;; This function is called by:
  1851 ;;		_pad
  1852 ;;		_vfpfcnvrt
  1853 ;;		_fputs
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           	psect	text7
  1858   00117E                     __ptext7:
  1859                           	callstack 0
  1860   00117E                     _fputc:
  1861                           	callstack 26
  1862   00117E  5003               	movf	fputc@fp^0,w,c
  1863   001180  1004               	iorwf	(fputc@fp+1)^0,w,c
  1864   001182  B4D8               	btfsc	status,2,c
  1865   001184  EFC6  F008         	goto	u631
  1866   001188  EFC8  F008         	goto	u630
  1867   00118C                     u631:
  1868   00118C  EFD1  F008         	goto	l1389
  1869   001190                     u630:
  1870   001190  5003               	movf	fputc@fp^0,w,c
  1871   001192  1004               	iorwf	(fputc@fp+1)^0,w,c
  1872   001194  A4D8               	btfss	status,2,c
  1873   001196  EFCF  F008         	goto	u641
  1874   00119A  EFD1  F008         	goto	u640
  1875   00119E                     u641:
  1876   00119E  EFD6  F008         	goto	l1391
  1877   0011A2                     u640:
  1878   0011A2                     l1389:
  1879   0011A2  5001               	movf	fputc@c^0,w,c
  1880   0011A4  EC2E  F00B         	call	_putch
  1881   0011A8  EF23  F009         	goto	l902
  1882   0011AC                     l1391:
  1883   0011AC  EE20 F009          	lfsr	2,9
  1884   0011B0  5003               	movf	fputc@fp^0,w,c
  1885   0011B2  26D9               	addwf	fsr2l,f,c
  1886   0011B4  5004               	movf	(fputc@fp+1)^0,w,c
  1887   0011B6  22DA               	addwfc	fsr2h,f,c
  1888   0011B8  50DE               	movf	postinc2,w,c
  1889   0011BA  10DE               	iorwf	postinc2,w,c
  1890   0011BC  B4D8               	btfsc	status,2,c
  1891   0011BE  EFE3  F008         	goto	u651
  1892   0011C2  EFE5  F008         	goto	u650
  1893   0011C6                     u651:
  1894   0011C6  EF00  F009         	goto	l1395
  1895   0011CA                     u650:
  1896   0011CA  EE20 F009          	lfsr	2,9
  1897   0011CE  5003               	movf	fputc@fp^0,w,c
  1898   0011D0  26D9               	addwf	fsr2l,f,c
  1899   0011D2  5004               	movf	(fputc@fp+1)^0,w,c
  1900   0011D4  22DA               	addwfc	fsr2h,f,c
  1901   0011D6  EE10 F003          	lfsr	1,3
  1902   0011DA  5003               	movf	fputc@fp^0,w,c
  1903   0011DC  26E1               	addwf	fsr1l,f,c
  1904   0011DE  5004               	movf	(fputc@fp+1)^0,w,c
  1905   0011E0  22E2               	addwfc	fsr1h,f,c
  1906   0011E2  50DE               	movf	postinc2,w,c
  1907   0011E4  5CE6               	subwf	postinc1,w,c
  1908   0011E6  50E6               	movf	postinc1,w,c
  1909   0011E8  0A80               	xorlw	128
  1910   0011EA  6E09               	movwf	(??_fputc+4)^0,c
  1911   0011EC  50DE               	movf	postinc2,w,c
  1912   0011EE  0A80               	xorlw	128
  1913   0011F0  5809               	subwfb	(??_fputc+4)^0,w,c
  1914   0011F2  B0D8               	btfsc	status,0,c
  1915   0011F4  EFFE  F008         	goto	u661
  1916   0011F8  EF00  F009         	goto	u660
  1917   0011FC                     u661:
  1918   0011FC  EF23  F009         	goto	l902
  1919   001200                     u660:
  1920   001200                     l1395:
  1921   001200  EE20 F003          	lfsr	2,3
  1922   001204  5003               	movf	fputc@fp^0,w,c
  1923   001206  26D9               	addwf	fsr2l,f,c
  1924   001208  5004               	movf	(fputc@fp+1)^0,w,c
  1925   00120A  22DA               	addwfc	fsr2h,f,c
  1926   00120C  CFDE F005          	movff	postinc2,??_fputc
  1927   001210  CFDD F006          	movff	postdec2,??_fputc+1
  1928   001214  C003  FFD9         	movff	fputc@fp,fsr2l
  1929   001218  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1930   00121C  CFDE F007          	movff	postinc2,??_fputc+2
  1931   001220  CFDD F008          	movff	postdec2,??_fputc+3
  1932   001224  5005               	movf	??_fputc^0,w,c
  1933   001226  2407               	addwf	(??_fputc+2)^0,w,c
  1934   001228  6ED9               	movwf	fsr2l,c
  1935   00122A  5006               	movf	(??_fputc+1)^0,w,c
  1936   00122C  2008               	addwfc	(??_fputc+3)^0,w,c
  1937   00122E  6EDA               	movwf	fsr2h,c
  1938   001230  C001  FFDF         	movff	fputc@c,indf2
  1939   001234  EE20 F003          	lfsr	2,3
  1940   001238  5003               	movf	fputc@fp^0,w,c
  1941   00123A  26D9               	addwf	fsr2l,f,c
  1942   00123C  5004               	movf	(fputc@fp+1)^0,w,c
  1943   00123E  22DA               	addwfc	fsr2h,f,c
  1944   001240  2ADE               	incf	postinc2,f,c
  1945   001242  0E00               	movlw	0
  1946   001244  22DD               	addwfc	postdec2,f,c
  1947   001246                     l902:
  1948   001246  0012               	return		;funcret
  1949   001248                     __end_of_fputc:
  1950                           	callstack 0
  1951                           
  1952 ;; *************** function _putch *****************
  1953 ;; Defined at:
  1954 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;  c               1    wreg     unsigned char 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  c               1    0[COMRAM] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1968 ;;      Params:         0       0       0       0       0       0       0
  1969 ;;      Locals:         0       0       0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0
  1971 ;;      Totals:         0       0       0       0       0       0       0
  1972 ;;Total ram usage:        0 bytes
  1973 ;; Hardware stack levels used: 1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_fputc
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text8
  1982   00165C                     __ptext8:
  1983                           	callstack 0
  1984   00165C                     _putch:
  1985                           	callstack 26
  1986   00165C  0012               	return		;funcret
  1987   00165E                     __end_of_putch:
  1988                           	callstack 0
  1989                           
  1990 ;; *************** function _abs *****************
  1991 ;; Defined at:
  1992 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  a               2   18[COMRAM] int 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  2   18[COMRAM] int 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2006 ;;      Params:         2       0       0       0       0       0       0
  2007 ;;      Locals:         0       0       0       0       0       0       0
  2008 ;;      Temps:          2       0       0       0       0       0       0
  2009 ;;      Totals:         4       0       0       0       0       0       0
  2010 ;;Total ram usage:        4 bytes
  2011 ;; Hardware stack levels used: 1
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_dtoa
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text9
  2020   001556                     __ptext9:
  2021                           	callstack 0
  2022   001556                     _abs:
  2023                           	callstack 26
  2024   001556  BE14               	btfsc	(abs@a+1)^0,7,c
  2025   001558  EFB8  F00A         	goto	u850
  2026   00155C  5014               	movf	(abs@a+1)^0,w,c
  2027   00155E  E106               	bnz	u851
  2028   001560  0413               	decf	abs@a^0,w,c
  2029   001562  B0D8               	btfsc	status,0,c
  2030   001564  EFB6  F00A         	goto	u851
  2031   001568  EFB8  F00A         	goto	u850
  2032   00156C                     u851:
  2033   00156C  EFC6  F00A         	goto	l848
  2034   001570                     u850:
  2035   001570  C013  F015         	movff	abs@a,??_abs
  2036   001574  C014  F016         	movff	abs@a+1,??_abs+1
  2037   001578  1E15               	comf	??_abs^0,f,c
  2038   00157A  1E16               	comf	(??_abs+1)^0,f,c
  2039   00157C  4A15               	infsnz	??_abs^0,f,c
  2040   00157E  2A16               	incf	(??_abs+1)^0,f,c
  2041   001580  C015  F013         	movff	??_abs,?_abs
  2042   001584  C016  F014         	movff	??_abs+1,?_abs+1
  2043   001588  EFCA  F00A         	goto	l851
  2044   00158C                     l848:
  2045   00158C  C013  F013         	movff	abs@a,?_abs
  2046   001590  C014  F014         	movff	abs@a+1,?_abs+1
  2047   001594                     l851:
  2048   001594  0012               	return		;funcret
  2049   001596                     __end_of_abs:
  2050                           	callstack 0
  2051                           
  2052 ;; *************** function ___aomod *****************
  2053 ;; Defined at:
  2054 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  dividend        8    0[COMRAM] long long 
  2057 ;;  divisor         8    8[COMRAM] long long 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  sign            1   17[COMRAM] unsigned char 
  2060 ;;  counter         1   16[COMRAM] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  8    0[COMRAM] long long 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2070 ;;      Params:        16       0       0       0       0       0       0
  2071 ;;      Locals:         2       0       0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0
  2073 ;;      Totals:        18       0       0       0       0       0       0
  2074 ;;Total ram usage:       18 bytes
  2075 ;; Hardware stack levels used: 1
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_dtoa
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text10
  2084   000D0E                     __ptext10:
  2085                           	callstack 0
  2086   000D0E                     ___aomod:
  2087                           	callstack 26
  2088   000D0E  0E00               	movlw	0
  2089   000D10  6E12               	movwf	___aomod@sign^0,c
  2090   000D12  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2091   000D14  EF90  F006         	goto	u750
  2092   000D18  EF8E  F006         	goto	u751
  2093   000D1C                     u751:
  2094   000D1C  EFA2  F006         	goto	l1465
  2095   000D20                     u750:
  2096   000D20  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2097   000D22  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2098   000D24  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2099   000D26  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2100   000D28  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2101   000D2A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2102   000D2C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2103   000D2E  6C01               	negf	___aomod@dividend^0,c
  2104   000D30  0E00               	movlw	0
  2105   000D32  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2106   000D34  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2107   000D36  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2108   000D38  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2109   000D3A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2110   000D3C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2111   000D3E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2112   000D40  0E01               	movlw	1
  2113   000D42  6E12               	movwf	___aomod@sign^0,c
  2114   000D44                     l1465:
  2115   000D44  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2116   000D46  EFA9  F006         	goto	u760
  2117   000D4A  EFA7  F006         	goto	u761
  2118   000D4E                     u761:
  2119   000D4E  EFB9  F006         	goto	l1469
  2120   000D52                     u760:
  2121   000D52  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2122   000D54  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2123   000D56  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2124   000D58  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2125   000D5A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2126   000D5C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2127   000D5E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2128   000D60  6C09               	negf	___aomod@divisor^0,c
  2129   000D62  0E00               	movlw	0
  2130   000D64  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2131   000D66  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2132   000D68  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2133   000D6A  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2134   000D6C  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2135   000D6E  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2136   000D70  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2137   000D72                     l1469:
  2138   000D72  5009               	movf	___aomod@divisor^0,w,c
  2139   000D74  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2140   000D76  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2141   000D78  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2142   000D7A  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2143   000D7C  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2144   000D7E  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2145   000D80  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2146   000D82  B4D8               	btfsc	status,2,c
  2147   000D84  EFC6  F006         	goto	u771
  2148   000D88  EFC8  F006         	goto	u770
  2149   000D8C                     u771:
  2150   000D8C  EF10  F007         	goto	l1485
  2151   000D90                     u770:
  2152   000D90  0E01               	movlw	1
  2153   000D92  6E11               	movwf	___aomod@counter^0,c
  2154   000D94  EFD6  F006         	goto	l1475
  2155   000D98                     l1473:
  2156   000D98  90D8               	bcf	status,0,c
  2157   000D9A  3609               	rlcf	___aomod@divisor^0,f,c
  2158   000D9C  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2159   000D9E  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2160   000DA0  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2161   000DA2  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2162   000DA4  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2163   000DA6  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2164   000DA8  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2165   000DAA  2A11               	incf	___aomod@counter^0,f,c
  2166   000DAC                     l1475:
  2167   000DAC  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2168   000DAE  EFDB  F006         	goto	u781
  2169   000DB2  EFDD  F006         	goto	u780
  2170   000DB6                     u781:
  2171   000DB6  EFCC  F006         	goto	l1473
  2172   000DBA                     u780:
  2173   000DBA                     l1477:
  2174   000DBA  5009               	movf	___aomod@divisor^0,w,c
  2175   000DBC  5C01               	subwf	___aomod@dividend^0,w,c
  2176   000DBE  500A               	movf	(___aomod@divisor+1)^0,w,c
  2177   000DC0  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2178   000DC2  500B               	movf	(___aomod@divisor+2)^0,w,c
  2179   000DC4  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2180   000DC6  500C               	movf	(___aomod@divisor+3)^0,w,c
  2181   000DC8  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2182   000DCA  500D               	movf	(___aomod@divisor+4)^0,w,c
  2183   000DCC  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2184   000DCE  500E               	movf	(___aomod@divisor+5)^0,w,c
  2185   000DD0  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2186   000DD2  500F               	movf	(___aomod@divisor+6)^0,w,c
  2187   000DD4  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2188   000DD6  5010               	movf	(___aomod@divisor+7)^0,w,c
  2189   000DD8  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2190   000DDA  A0D8               	btfss	status,0,c
  2191   000DDC  EFF2  F006         	goto	u791
  2192   000DE0  EFF4  F006         	goto	u790
  2193   000DE4                     u791:
  2194   000DE4  EF04  F007         	goto	l1481
  2195   000DE8                     u790:
  2196   000DE8  5009               	movf	___aomod@divisor^0,w,c
  2197   000DEA  5E01               	subwf	___aomod@dividend^0,f,c
  2198   000DEC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2199   000DEE  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2200   000DF0  500B               	movf	(___aomod@divisor+2)^0,w,c
  2201   000DF2  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2202   000DF4  500C               	movf	(___aomod@divisor+3)^0,w,c
  2203   000DF6  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2204   000DF8  500D               	movf	(___aomod@divisor+4)^0,w,c
  2205   000DFA  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2206   000DFC  500E               	movf	(___aomod@divisor+5)^0,w,c
  2207   000DFE  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2208   000E00  500F               	movf	(___aomod@divisor+6)^0,w,c
  2209   000E02  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2210   000E04  5010               	movf	(___aomod@divisor+7)^0,w,c
  2211   000E06  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2212   000E08                     l1481:
  2213   000E08  90D8               	bcf	status,0,c
  2214   000E0A  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2215   000E0C  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2216   000E0E  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2217   000E10  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2218   000E12  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2219   000E14  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2220   000E16  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2221   000E18  3209               	rrcf	___aomod@divisor^0,f,c
  2222   000E1A  2E11               	decfsz	___aomod@counter^0,f,c
  2223   000E1C  EFDD  F006         	goto	l1477
  2224   000E20                     l1485:
  2225   000E20  5012               	movf	___aomod@sign^0,w,c
  2226   000E22  B4D8               	btfsc	status,2,c
  2227   000E24  EF16  F007         	goto	u801
  2228   000E28  EF18  F007         	goto	u800
  2229   000E2C                     u801:
  2230   000E2C  EF28  F007         	goto	l1489
  2231   000E30                     u800:
  2232   000E30  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2233   000E32  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2234   000E34  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2235   000E36  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2236   000E38  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2237   000E3A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2238   000E3C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2239   000E3E  6C01               	negf	___aomod@dividend^0,c
  2240   000E40  0E00               	movlw	0
  2241   000E42  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2242   000E44  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2243   000E46  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2244   000E48  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2245   000E4A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2246   000E4C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2247   000E4E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2248   000E50                     l1489:
  2249   000E50  C001  F001         	movff	___aomod@dividend,?___aomod
  2250   000E54  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2251   000E58  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2252   000E5C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2253   000E60  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2254   000E64  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2255   000E68  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2256   000E6C  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2257   000E70  0012               	return		;funcret
  2258   000E72                     __end_of___aomod:
  2259                           	callstack 0
  2260                           
  2261 ;; *************** function ___aodiv *****************
  2262 ;; Defined at:
  2263 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;  dividend        8    0[COMRAM] long long 
  2266 ;;  divisor         8    8[COMRAM] long long 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  quotient        8   18[COMRAM] long long 
  2269 ;;  sign            1   17[COMRAM] unsigned char 
  2270 ;;  counter         1   16[COMRAM] unsigned char 
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  8    0[COMRAM] long long 
  2273 ;; Registers used:
  2274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2280 ;;      Params:        16       0       0       0       0       0       0
  2281 ;;      Locals:        10       0       0       0       0       0       0
  2282 ;;      Temps:          0       0       0       0       0       0       0
  2283 ;;      Totals:        26       0       0       0       0       0       0
  2284 ;;Total ram usage:       26 bytes
  2285 ;; Hardware stack levels used: 1
  2286 ;; This function calls:
  2287 ;;		Nothing
  2288 ;; This function is called by:
  2289 ;;		_dtoa
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text11
  2294   000B86                     __ptext11:
  2295                           	callstack 0
  2296   000B86                     ___aodiv:
  2297                           	callstack 26
  2298   000B86  0E00               	movlw	0
  2299   000B88  6E12               	movwf	___aodiv@sign^0,c
  2300   000B8A  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2301   000B8C  EFCC  F005         	goto	u680
  2302   000B90  EFCA  F005         	goto	u681
  2303   000B94                     u681:
  2304   000B94  EFDE  F005         	goto	l1421
  2305   000B98                     u680:
  2306   000B98  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2307   000B9A  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2308   000B9C  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2309   000B9E  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2310   000BA0  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2311   000BA2  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2312   000BA4  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2313   000BA6  6C09               	negf	___aodiv@divisor^0,c
  2314   000BA8  0E00               	movlw	0
  2315   000BAA  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2316   000BAC  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2317   000BAE  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2318   000BB0  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2319   000BB2  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2320   000BB4  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2321   000BB6  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2322   000BB8  0E01               	movlw	1
  2323   000BBA  6E12               	movwf	___aodiv@sign^0,c
  2324   000BBC                     l1421:
  2325   000BBC  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2326   000BBE  EFE5  F005         	goto	u690
  2327   000BC2  EFE3  F005         	goto	u691
  2328   000BC6                     u691:
  2329   000BC6  EFF7  F005         	goto	l1427
  2330   000BCA                     u690:
  2331   000BCA  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2332   000BCC  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2333   000BCE  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2334   000BD0  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2335   000BD2  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2336   000BD4  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2337   000BD6  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2338   000BD8  6C01               	negf	___aodiv@dividend^0,c
  2339   000BDA  0E00               	movlw	0
  2340   000BDC  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2341   000BDE  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2342   000BE0  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2343   000BE2  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2344   000BE4  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2345   000BE6  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2346   000BE8  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2347   000BEA  0E01               	movlw	1
  2348   000BEC  1A12               	xorwf	___aodiv@sign^0,f,c
  2349   000BEE                     l1427:
  2350   000BEE  EE20  F013         	lfsr	2,___aodiv@quotient
  2351   000BF2  0E07               	movlw	7
  2352   000BF4                     u701:
  2353   000BF4  6ADE               	clrf	postinc2,c
  2354   000BF6  06E8               	decf	wreg,f,c
  2355   000BF8  E2FD               	bc	u701
  2356   000BFA  5009               	movf	___aodiv@divisor^0,w,c
  2357   000BFC  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2358   000BFE  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2359   000C00  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2360   000C02  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2361   000C04  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2362   000C06  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2363   000C08  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2364   000C0A  B4D8               	btfsc	status,2,c
  2365   000C0C  EF0A  F006         	goto	u711
  2366   000C10  EF0C  F006         	goto	u710
  2367   000C14                     u711:
  2368   000C14  EF5E  F006         	goto	l1449
  2369   000C18                     u710:
  2370   000C18  0E01               	movlw	1
  2371   000C1A  6E11               	movwf	___aodiv@counter^0,c
  2372   000C1C  EF1A  F006         	goto	l1435
  2373   000C20                     l1433:
  2374   000C20  90D8               	bcf	status,0,c
  2375   000C22  3609               	rlcf	___aodiv@divisor^0,f,c
  2376   000C24  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2377   000C26  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2378   000C28  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2379   000C2A  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2380   000C2C  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2381   000C2E  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2382   000C30  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2383   000C32  2A11               	incf	___aodiv@counter^0,f,c
  2384   000C34                     l1435:
  2385   000C34  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2386   000C36  EF1F  F006         	goto	u721
  2387   000C3A  EF21  F006         	goto	u720
  2388   000C3E                     u721:
  2389   000C3E  EF10  F006         	goto	l1433
  2390   000C42                     u720:
  2391   000C42                     l1437:
  2392   000C42  90D8               	bcf	status,0,c
  2393   000C44  3613               	rlcf	___aodiv@quotient^0,f,c
  2394   000C46  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2395   000C48  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2396   000C4A  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2397   000C4C  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2398   000C4E  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2399   000C50  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2400   000C52  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2401   000C54  5009               	movf	___aodiv@divisor^0,w,c
  2402   000C56  5C01               	subwf	___aodiv@dividend^0,w,c
  2403   000C58  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2404   000C5A  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2405   000C5C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2406   000C5E  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2407   000C60  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2408   000C62  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2409   000C64  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2410   000C66  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2411   000C68  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2412   000C6A  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2413   000C6C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2414   000C6E  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2415   000C70  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2416   000C72  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2417   000C74  A0D8               	btfss	status,0,c
  2418   000C76  EF3F  F006         	goto	u731
  2419   000C7A  EF41  F006         	goto	u730
  2420   000C7E                     u731:
  2421   000C7E  EF52  F006         	goto	l1445
  2422   000C82                     u730:
  2423   000C82  5009               	movf	___aodiv@divisor^0,w,c
  2424   000C84  5E01               	subwf	___aodiv@dividend^0,f,c
  2425   000C86  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2426   000C88  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2427   000C8A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2428   000C8C  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2429   000C8E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2430   000C90  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2431   000C92  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2432   000C94  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2433   000C96  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2434   000C98  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2435   000C9A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2436   000C9C  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2437   000C9E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2438   000CA0  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2439   000CA2  8013               	bsf	___aodiv@quotient^0,0,c
  2440   000CA4                     l1445:
  2441   000CA4  90D8               	bcf	status,0,c
  2442   000CA6  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2443   000CA8  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2444   000CAA  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2445   000CAC  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2446   000CAE  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2447   000CB0  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2448   000CB2  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2449   000CB4  3209               	rrcf	___aodiv@divisor^0,f,c
  2450   000CB6  2E11               	decfsz	___aodiv@counter^0,f,c
  2451   000CB8  EF21  F006         	goto	l1437
  2452   000CBC                     l1449:
  2453   000CBC  5012               	movf	___aodiv@sign^0,w,c
  2454   000CBE  B4D8               	btfsc	status,2,c
  2455   000CC0  EF64  F006         	goto	u741
  2456   000CC4  EF66  F006         	goto	u740
  2457   000CC8                     u741:
  2458   000CC8  EF76  F006         	goto	l1453
  2459   000CCC                     u740:
  2460   000CCC  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2461   000CCE  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2462   000CD0  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2463   000CD2  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2464   000CD4  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2465   000CD6  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2466   000CD8  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2467   000CDA  6C13               	negf	___aodiv@quotient^0,c
  2468   000CDC  0E00               	movlw	0
  2469   000CDE  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2470   000CE0  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2471   000CE2  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2472   000CE4  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2473   000CE6  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2474   000CE8  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2475   000CEA  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2476   000CEC                     l1453:
  2477   000CEC  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2478   000CF0  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2479   000CF4  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2480   000CF8  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2481   000CFC  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2482   000D00  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2483   000D04  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2484   000D08  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2485   000D0C  0012               	return		;funcret
  2486   000D0E                     __end_of___aodiv:
  2487                           	callstack 0
  2488                           
  2489 ;; *************** function _atoi *****************
  2490 ;; Defined at:
  2491 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2494 ;;		 -> STR_2(5), 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;  n               2   13[COMRAM] int 
  2497 ;;  neg             2   11[COMRAM] int 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  2    6[COMRAM] int 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2507 ;;      Params:         2       0       0       0       0       0       0
  2508 ;;      Locals:         4       0       0       0       0       0       0
  2509 ;;      Temps:          3       0       0       0       0       0       0
  2510 ;;      Totals:         9       0       0       0       0       0       0
  2511 ;;Total ram usage:        9 bytes
  2512 ;; Hardware stack levels used: 1
  2513 ;; Hardware stack levels required when called: 1
  2514 ;; This function calls:
  2515 ;;		___wmul
  2516 ;;		_isdigit
  2517 ;;		_isspace
  2518 ;; This function is called by:
  2519 ;;		_vfpfcnvrt
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text12
  2524   000E72                     __ptext12:
  2525                           	callstack 0
  2526   000E72                     _atoi:
  2527                           	callstack 26
  2528   000E72  0E00               	movlw	0
  2529   000E74  6E0F               	movwf	(atoi@n+1)^0,c
  2530   000E76  0E00               	movlw	0
  2531   000E78  6E0E               	movwf	atoi@n^0,c
  2532   000E7A  0E00               	movlw	0
  2533   000E7C  6E0D               	movwf	(atoi@neg+1)^0,c
  2534   000E7E  0E00               	movlw	0
  2535   000E80  6E0C               	movwf	atoi@neg^0,c
  2536   000E82  EF45  F007         	goto	l1609
  2537   000E86                     l1605:
  2538   000E86  4A07               	infsnz	atoi@s^0,f,c
  2539   000E88  2A08               	incf	(atoi@s+1)^0,f,c
  2540   000E8A                     l1609:
  2541   000E8A  C007  FFF6         	movff	atoi@s,tblptrl
  2542   000E8E  C008  FFF7         	movff	atoi@s+1,tblptrh
  2543   000E92                     	if	0	;tblptru may be non-zero
  2544   000E92                     	endif
  2545   000E92                     	if	0	;tblptru may be non-zero
  2546   000E92                     	endif
  2547   000E92  0008               	tblrd		*
  2548   000E94  50F5               	movf	tablat,w,c
  2549   000E96  0A20               	xorlw	32
  2550   000E98  B4D8               	btfsc	status,2,c
  2551   000E9A  EF51  F007         	goto	u1041
  2552   000E9E  EF53  F007         	goto	u1040
  2553   000EA2                     u1041:
  2554   000EA2  EF43  F007         	goto	l1605
  2555   000EA6                     u1040:
  2556   000EA6  C007  FFF6         	movff	atoi@s,tblptrl
  2557   000EAA  C008  FFF7         	movff	atoi@s+1,tblptrh
  2558   000EAE                     	if	0	;tblptru may be non-zero
  2559   000EAE                     	endif
  2560   000EAE                     	if	0	;tblptru may be non-zero
  2561   000EAE                     	endif
  2562   000EAE  0008               	tblrd		*
  2563   000EB0  CFF5 F009          	movff	tablat,??_atoi
  2564   000EB4  0EF7               	movlw	247
  2565   000EB6  2409               	addwf	??_atoi^0,w,c
  2566   000EB8  6E0A               	movwf	(??_atoi+1)^0,c
  2567   000EBA  6A0B               	clrf	(??_atoi+2)^0,c
  2568   000EBC  0EFF               	movlw	255
  2569   000EBE  220B               	addwfc	(??_atoi+2)^0,f,c
  2570   000EC0  500B               	movf	(??_atoi+2)^0,w,c
  2571   000EC2  E109               	bnz	u1050
  2572   000EC4  0E05               	movlw	5
  2573   000EC6  5C0A               	subwf	(??_atoi+1)^0,w,c
  2574   000EC8  A0D8               	btfss	status,0,c
  2575   000ECA  EF69  F007         	goto	u1051
  2576   000ECE  EF6B  F007         	goto	u1050
  2577   000ED2                     u1051:
  2578   000ED2  EF43  F007         	goto	l1605
  2579   000ED6                     u1050:
  2580   000ED6  EF75  F007         	goto	l1617
  2581   000EDA                     l1613:
  2582   000EDA  0E00               	movlw	0
  2583   000EDC  6E0D               	movwf	(atoi@neg+1)^0,c
  2584   000EDE  0E01               	movlw	1
  2585   000EE0  6E0C               	movwf	atoi@neg^0,c
  2586   000EE2                     l1615:
  2587   000EE2  4A07               	infsnz	atoi@s^0,f,c
  2588   000EE4  2A08               	incf	(atoi@s+1)^0,f,c
  2589   000EE6  EFAA  F007         	goto	l1625
  2590   000EEA                     l1617:
  2591   000EEA  C007  FFF6         	movff	atoi@s,tblptrl
  2592   000EEE  C008  FFF7         	movff	atoi@s+1,tblptrh
  2593   000EF2                     	if	0	;tblptru may be non-zero
  2594   000EF2                     	endif
  2595   000EF2                     	if	0	;tblptru may be non-zero
  2596   000EF2                     	endif
  2597   000EF2  0008               	tblrd		*
  2598   000EF4  50F5               	movf	tablat,w,c
  2599   000EF6  6E09               	movwf	??_atoi^0,c
  2600   000EF8  6A0A               	clrf	(??_atoi+1)^0,c
  2601                           
  2602                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2603                           ; Switch size 1, requested type "simple"
  2604                           ; Number of cases is 1, Range of values is 0 to 0
  2605                           ; switch strategies available:
  2606                           ; Name         Instructions Cycles
  2607                           ; simple_byte            4     3 (average)
  2608                           ;	Chosen strategy is simple_byte
  2609   000EFA  500A               	movf	(??_atoi+1)^0,w,c
  2610   000EFC  0A00               	xorlw	0	; case 0
  2611   000EFE  B4D8               	btfsc	status,2,c
  2612   000F00  EF84  F007         	goto	l1889
  2613   000F04  EFAA  F007         	goto	l1625
  2614   000F08                     l1889:
  2615                           
  2616                           ; Switch size 1, requested type "simple"
  2617                           ; Number of cases is 2, Range of values is 43 to 45
  2618                           ; switch strategies available:
  2619                           ; Name         Instructions Cycles
  2620                           ; simple_byte            7     4 (average)
  2621                           ;	Chosen strategy is simple_byte
  2622   000F08  5009               	movf	??_atoi^0,w,c
  2623   000F0A  0A2B               	xorlw	43	; case 43
  2624   000F0C  B4D8               	btfsc	status,2,c
  2625   000F0E  EF71  F007         	goto	l1615
  2626   000F12  0A06               	xorlw	6	; case 45
  2627   000F14  B4D8               	btfsc	status,2,c
  2628   000F16  EF6D  F007         	goto	l1613
  2629   000F1A  EFAA  F007         	goto	l1625
  2630   000F1E                     l1619:
  2631   000F1E  C00E  F001         	movff	atoi@n,___wmul@multiplier
  2632   000F22  C00F  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2633   000F26  0E00               	movlw	0
  2634   000F28  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2635   000F2A  0E0A               	movlw	10
  2636   000F2C  6E03               	movwf	___wmul@multiplicand^0,c
  2637   000F2E  ECE1  F00A         	call	___wmul	;wreg free
  2638   000F32  C007  FFF6         	movff	atoi@s,tblptrl
  2639   000F36  C008  FFF7         	movff	atoi@s+1,tblptrh
  2640   000F3A                     	if	0	;tblptru may be non-zero
  2641   000F3A                     	endif
  2642   000F3A                     	if	0	;tblptru may be non-zero
  2643   000F3A                     	endif
  2644   000F3A  0008               	tblrd		*
  2645   000F3C  50F5               	movf	tablat,w,c
  2646   000F3E  5E01               	subwf	?___wmul^0,f,c
  2647   000F40  0E00               	movlw	0
  2648   000F42  5A02               	subwfb	(?___wmul+1)^0,f,c
  2649   000F44  0E30               	movlw	48
  2650   000F46  2401               	addwf	?___wmul^0,w,c
  2651   000F48  6E0E               	movwf	atoi@n^0,c
  2652   000F4A  0E00               	movlw	0
  2653   000F4C  2002               	addwfc	(?___wmul+1)^0,w,c
  2654   000F4E  6E0F               	movwf	(atoi@n+1)^0,c
  2655   000F50  EF71  F007         	goto	l1615
  2656   000F54                     l1625:
  2657   000F54  C007  FFF6         	movff	atoi@s,tblptrl
  2658   000F58  C008  FFF7         	movff	atoi@s+1,tblptrh
  2659   000F5C                     	if	0	;tblptru may be non-zero
  2660   000F5C                     	endif
  2661   000F5C                     	if	0	;tblptru may be non-zero
  2662   000F5C                     	endif
  2663   000F5C  0008               	tblrd		*
  2664   000F5E  CFF5 F009          	movff	tablat,??_atoi
  2665   000F62  0ED0               	movlw	208
  2666   000F64  2409               	addwf	??_atoi^0,w,c
  2667   000F66  6E0A               	movwf	(??_atoi+1)^0,c
  2668   000F68  6A0B               	clrf	(??_atoi+2)^0,c
  2669   000F6A  0EFF               	movlw	255
  2670   000F6C  220B               	addwfc	(??_atoi+2)^0,f,c
  2671   000F6E  500B               	movf	(??_atoi+2)^0,w,c
  2672   000F70  E109               	bnz	u1060
  2673   000F72  0E0A               	movlw	10
  2674   000F74  5C0A               	subwf	(??_atoi+1)^0,w,c
  2675   000F76  A0D8               	btfss	status,0,c
  2676   000F78  EFC0  F007         	goto	u1061
  2677   000F7C  EFC2  F007         	goto	u1060
  2678   000F80                     u1061:
  2679   000F80  EF8F  F007         	goto	l1619
  2680   000F84                     u1060:
  2681   000F84  500C               	movf	atoi@neg^0,w,c
  2682   000F86  100D               	iorwf	(atoi@neg+1)^0,w,c
  2683   000F88  A4D8               	btfss	status,2,c
  2684   000F8A  EFC9  F007         	goto	u1071
  2685   000F8E  EFCB  F007         	goto	u1070
  2686   000F92                     u1071:
  2687   000F92  EFD9  F007         	goto	l873
  2688   000F96                     u1070:
  2689   000F96  C00E  F009         	movff	atoi@n,??_atoi
  2690   000F9A  C00F  F00A         	movff	atoi@n+1,??_atoi+1
  2691   000F9E  1E09               	comf	??_atoi^0,f,c
  2692   000FA0  1E0A               	comf	(??_atoi+1)^0,f,c
  2693   000FA2  4A09               	infsnz	??_atoi^0,f,c
  2694   000FA4  2A0A               	incf	(??_atoi+1)^0,f,c
  2695   000FA6  C009  F007         	movff	??_atoi,?_atoi
  2696   000FAA  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2697   000FAE  EFDD  F007         	goto	l876
  2698   000FB2                     l873:
  2699   000FB2  C00E  F007         	movff	atoi@n,?_atoi
  2700   000FB6  C00F  F008         	movff	atoi@n+1,?_atoi+1
  2701   000FBA                     l876:
  2702   000FBA  0012               	return		;funcret
  2703   000FBC                     __end_of_atoi:
  2704                           	callstack 0
  2705                           
  2706 ;; *************** function _isspace *****************
  2707 ;; Defined at:
  2708 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  c               2    0[COMRAM] int 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  2    0[COMRAM] int 
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2722 ;;      Params:         2       0       0       0       0       0       0
  2723 ;;      Locals:         1       0       0       0       0       0       0
  2724 ;;      Temps:          2       0       0       0       0       0       0
  2725 ;;      Totals:         5       0       0       0       0       0       0
  2726 ;;Total ram usage:        5 bytes
  2727 ;; Hardware stack levels used: 1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_atoi
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text13
  2736   0014CC                     __ptext13:
  2737                           	callstack 0
  2738   0014CC                     _isspace:
  2739                           	callstack 26
  2740   0014CC  0E01               	movlw	1
  2741   0014CE  6E05               	movwf	_isspace$953^0,c
  2742   0014D0  0E20               	movlw	32
  2743   0014D2  1801               	xorwf	isspace@c^0,w,c
  2744   0014D4  1002               	iorwf	(isspace@c+1)^0,w,c
  2745   0014D6  B4D8               	btfsc	status,2,c
  2746   0014D8  EF70  F00A         	goto	u881
  2747   0014DC  EF72  F00A         	goto	u880
  2748   0014E0                     u881:
  2749   0014E0  EF85  F00A         	goto	l1527
  2750   0014E4                     u880:
  2751   0014E4  0EF7               	movlw	247
  2752   0014E6  2401               	addwf	isspace@c^0,w,c
  2753   0014E8  6E03               	movwf	??_isspace^0,c
  2754   0014EA  0EFF               	movlw	255
  2755   0014EC  2002               	addwfc	(isspace@c+1)^0,w,c
  2756   0014EE  6E04               	movwf	(??_isspace+1)^0,c
  2757   0014F0  5004               	movf	(??_isspace+1)^0,w,c
  2758   0014F2  E109               	bnz	u890
  2759   0014F4  0E05               	movlw	5
  2760   0014F6  5C03               	subwf	??_isspace^0,w,c
  2761   0014F8  A0D8               	btfss	status,0,c
  2762   0014FA  EF81  F00A         	goto	u891
  2763   0014FE  EF83  F00A         	goto	u890
  2764   001502                     u891:
  2765   001502  EF85  F00A         	goto	l1527
  2766   001506                     u890:
  2767   001506  0E00               	movlw	0
  2768   001508  6E05               	movwf	_isspace$953^0,c
  2769   00150A                     l1527:
  2770   00150A  C005  F001         	movff	_isspace$953,?_isspace
  2771   00150E  6A02               	clrf	(?_isspace+1)^0,c
  2772   001510  0012               	return		;funcret
  2773   001512                     __end_of_isspace:
  2774                           	callstack 0
  2775                           
  2776 ;; *************** function _isdigit *****************
  2777 ;; Defined at:
  2778 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  c               2    0[COMRAM] int 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  2    0[COMRAM] int 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2792 ;;      Params:         2       0       0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0       0       0
  2794 ;;      Temps:          2       0       0       0       0       0       0
  2795 ;;      Totals:         4       0       0       0       0       0       0
  2796 ;;Total ram usage:        4 bytes
  2797 ;; Hardware stack levels used: 1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_vfpfcnvrt
  2802 ;;		_atoi
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text14
  2807   001596                     __ptext14:
  2808                           	callstack 0
  2809   001596                     _isdigit:
  2810                           	callstack 27
  2811   001596  0ED0               	movlw	208
  2812   001598  2401               	addwf	isdigit@c^0,w,c
  2813   00159A  6E03               	movwf	??_isdigit^0,c
  2814   00159C  0EFF               	movlw	255
  2815   00159E  2002               	addwfc	(isdigit@c+1)^0,w,c
  2816   0015A0  6E04               	movwf	(??_isdigit+1)^0,c
  2817   0015A2  5004               	movf	(??_isdigit+1)^0,w,c
  2818   0015A4  E10A               	bnz	u860
  2819   0015A6  0E0A               	movlw	10
  2820   0015A8  5C03               	subwf	??_isdigit^0,w,c
  2821   0015AA  A0D8               	btfss	status,0,c
  2822   0015AC  EFDA  F00A         	goto	u861
  2823   0015B0  EFDD  F00A         	goto	u860
  2824   0015B4                     u861:
  2825   0015B4  0E01               	movlw	1
  2826   0015B6  EFDE  F00A         	goto	u870
  2827   0015BA                     u860:
  2828   0015BA  0E00               	movlw	0
  2829   0015BC                     u870:
  2830   0015BC  6E01               	movwf	?_isdigit^0,c
  2831   0015BE  6A02               	clrf	(?_isdigit+1)^0,c
  2832   0015C0  0012               	return		;funcret
  2833   0015C2                     __end_of_isdigit:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function ___wmul *****************
  2837 ;; Defined at:
  2838 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  multiplier      2    0[COMRAM] unsigned int 
  2841 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  product         2    4[COMRAM] unsigned int 
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  2    0[COMRAM] unsigned int 
  2846 ;; Registers used:
  2847 ;;		wreg, status,2, status,0, prodl, prodh
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2853 ;;      Params:         4       0       0       0       0       0       0
  2854 ;;      Locals:         2       0       0       0       0       0       0
  2855 ;;      Temps:          0       0       0       0       0       0       0
  2856 ;;      Totals:         6       0       0       0       0       0       0
  2857 ;;Total ram usage:        6 bytes
  2858 ;; Hardware stack levels used: 1
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_atoi
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text15
  2867   0015C2                     __ptext15:
  2868                           	callstack 0
  2869   0015C2                     ___wmul:
  2870                           	callstack 26
  2871   0015C2  5001               	movf	___wmul@multiplier^0,w,c
  2872   0015C4  0203               	mulwf	___wmul@multiplicand^0,c
  2873   0015C6  CFF3 F005          	movff	prodl,___wmul@product
  2874   0015CA  CFF4 F006          	movff	prodh,___wmul@product+1
  2875   0015CE  5001               	movf	___wmul@multiplier^0,w,c
  2876   0015D0  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2877   0015D2  50F3               	movf	243,w,c
  2878   0015D4  2606               	addwf	(___wmul@product+1)^0,f,c
  2879   0015D6  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2880   0015D8  0203               	mulwf	___wmul@multiplicand^0,c
  2881   0015DA  50F3               	movf	243,w,c
  2882   0015DC  2606               	addwf	(___wmul@product+1)^0,f,c
  2883   0015DE  C005  F001         	movff	___wmul@product,?___wmul
  2884   0015E2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2885   0015E6  0012               	return		;funcret
  2886   0015E8                     __end_of___wmul:
  2887                           	callstack 0
  2888                           
  2889 ;; *************** function _lcd_write *****************
  2890 ;; Defined at:
  2891 ;;		line 79 in file "LCD4b_EXSTO.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  lin             1    wreg     unsigned char 
  2894 ;;  col             1    6[COMRAM] unsigned char 
  2895 ;;  str             2    7[COMRAM] PTR unsigned char 
  2896 ;;		 -> STR_4(17), STR_3(16), bufferLCD(16), STR_1(16), 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  lin             1   10[COMRAM] unsigned char 
  2899 ;;  end             1    9[COMRAM] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2909 ;;      Params:         3       0       0       0       0       0       0
  2910 ;;      Locals:         2       0       0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0
  2912 ;;      Totals:         5       0       0       0       0       0       0
  2913 ;;Total ram usage:        5 bytes
  2914 ;; Hardware stack levels used: 1
  2915 ;; Hardware stack levels required when called: 3
  2916 ;; This function calls:
  2917 ;;		_lcd_send_byte
  2918 ;; This function is called by:
  2919 ;;		_main
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text16
  2924   0012F2                     __ptext16:
  2925                           	callstack 0
  2926   0012F2                     _lcd_write:
  2927                           	callstack 27
  2928                           
  2929                           ;incstack = 0
  2930                           ;lcd_write@lin stored from wreg
  2931   0012F2  6E0B               	movwf	lcd_write@lin^0,c
  2932   0012F4                     
  2933                           ;LCD4b_EXSTO.c: 79: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 80: {;L
      +                          CD4b_EXSTO.c: 81:     char end;;LCD4b_EXSTO.c: 83:     if(lin == 1)
  2934   0012F4  040B               	decf	lcd_write@lin^0,w,c
  2935   0012F6  A4D8               	btfss	status,2,c
  2936   0012F8  EF80  F009         	goto	u1181
  2937   0012FC  EF82  F009         	goto	u1180
  2938   001300                     u1181:
  2939   001300  EF87  F009         	goto	l1789
  2940   001304                     u1180:
  2941   001304                     
  2942                           ;LCD4b_EXSTO.c: 84:     {;LCD4b_EXSTO.c: 85:         end = col + 0X80 - 1;
  2943   001304  5007               	movf	lcd_write@col^0,w,c
  2944   001306  0F7F               	addlw	127
  2945   001308  6E0A               	movwf	lcd_write@end^0,c
  2946                           
  2947                           ;LCD4b_EXSTO.c: 86:     }
  2948   00130A  EF93  F009         	goto	l1793
  2949   00130E                     l1789:
  2950   00130E  0E02               	movlw	2
  2951   001310  180B               	xorwf	lcd_write@lin^0,w,c
  2952   001312  A4D8               	btfss	status,2,c
  2953   001314  EF8E  F009         	goto	u1191
  2954   001318  EF90  F009         	goto	u1190
  2955   00131C                     u1191:
  2956   00131C  EF93  F009         	goto	l1793
  2957   001320                     u1190:
  2958   001320                     
  2959                           ;LCD4b_EXSTO.c: 88:     {;LCD4b_EXSTO.c: 89:         end = col + 0xC0 - 1;
  2960   001320  5007               	movf	lcd_write@col^0,w,c
  2961   001322  0FBF               	addlw	191
  2962   001324  6E0A               	movwf	lcd_write@end^0,c
  2963   001326                     l1793:
  2964                           
  2965                           ;LCD4b_EXSTO.c: 91:     lcd_send_byte(0,end);
  2966   001326  C00A  F005         	movff	lcd_write@end,lcd_send_byte@data
  2967   00132A  0E00               	movlw	0
  2968   00132C  EC15  F00B         	call	_lcd_send_byte
  2969                           
  2970                           ;LCD4b_EXSTO.c: 93:     while(*str)
  2971   001330  EFB0  F009         	goto	l1799
  2972   001334                     l1795:
  2973                           
  2974                           ;LCD4b_EXSTO.c: 94:     {;LCD4b_EXSTO.c: 95:         lcd_send_byte(1,*str);
  2975   001334  C008  FFF6         	movff	lcd_write@str,tblptrl
  2976   001338  C009  FFF7         	movff	lcd_write@str+1,tblptrh
  2977   00133C  6AF8               	clrf	tblptru,c
  2978   00133E  0E05               	movlw	(high __ramtop+-1)
  2979   001340  64F7               	cpfsgt	tblptrh,c
  2980   001342  D003               	bra	u1207
  2981   001344  0008               	tblrd		*
  2982   001346  50F5               	movf	tablat,w,c
  2983   001348  D005               	bra	u1200
  2984   00134A                     u1207:
  2985   00134A  CFF6 FFE1          	movff	tblptrl,fsr1l
  2986   00134E  CFF7 FFE2          	movff	tblptrh,fsr1h
  2987   001352  50E7               	movf	indf1,w,c
  2988   001354                     u1200:
  2989   001354  6E05               	movwf	lcd_send_byte@data^0,c
  2990   001356  0E01               	movlw	1
  2991   001358  EC15  F00B         	call	_lcd_send_byte
  2992   00135C                     
  2993                           ;LCD4b_EXSTO.c: 96:         str++;
  2994   00135C  4A08               	infsnz	lcd_write@str^0,f,c
  2995   00135E  2A09               	incf	(lcd_write@str+1)^0,f,c
  2996   001360                     l1799:
  2997                           
  2998                           ;LCD4b_EXSTO.c: 93:     while(*str)
  2999   001360  C008  FFF6         	movff	lcd_write@str,tblptrl
  3000   001364  C009  FFF7         	movff	lcd_write@str+1,tblptrh
  3001   001368  6AF8               	clrf	tblptru,c
  3002   00136A  0E05               	movlw	(high __ramtop+-1)
  3003   00136C  64F7               	cpfsgt	tblptrh,c
  3004   00136E  D003               	bra	u1217
  3005   001370  0008               	tblrd		*
  3006   001372  50F5               	movf	tablat,w,c
  3007   001374  D005               	bra	u1210
  3008   001376                     u1217:
  3009   001376  CFF6 FFE1          	movff	tblptrl,fsr1l
  3010   00137A  CFF7 FFE2          	movff	tblptrh,fsr1h
  3011   00137E  50E7               	movf	indf1,w,c
  3012   001380                     u1210:
  3013   001380  0900               	iorlw	0
  3014   001382  A4D8               	btfss	status,2,c
  3015   001384  EFC6  F009         	goto	u1221
  3016   001388  EFC8  F009         	goto	u1220
  3017   00138C                     u1221:
  3018   00138C  EF9A  F009         	goto	l1795
  3019   001390                     u1220:
  3020   001390  0012               	return		;funcret
  3021   001392                     __end_of_lcd_write:
  3022                           	callstack 0
  3023                           
  3024 ;; *************** function _lcd_send_byte *****************
  3025 ;; Defined at:
  3026 ;;		line 63 in file "LCD4b_EXSTO.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  level           1    wreg     unsigned char 
  3029 ;;  data            1    4[COMRAM] unsigned char 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  level           1    5[COMRAM] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3041 ;;      Params:         1       0       0       0       0       0       0
  3042 ;;      Locals:         1       0       0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0
  3044 ;;      Totals:         2       0       0       0       0       0       0
  3045 ;;Total ram usage:        2 bytes
  3046 ;; Hardware stack levels used: 1
  3047 ;; Hardware stack levels required when called: 2
  3048 ;; This function calls:
  3049 ;;		_lcd_cmd
  3050 ;; This function is called by:
  3051 ;;		_lcd_write
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text17
  3056   00162A                     __ptext17:
  3057                           	callstack 0
  3058   00162A                     _lcd_send_byte:
  3059                           	callstack 27
  3060                           
  3061                           ;incstack = 0
  3062                           ;lcd_send_byte@level stored from wreg
  3063   00162A  6E06               	movwf	lcd_send_byte@level^0,c
  3064   00162C                     
  3065                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  3066   00162C  B006               	btfsc	lcd_send_byte@level^0,0,c
  3067   00162E  D002               	bra	u1155
  3068   001630  9084               	bcf	132,0,c	;volatile
  3069   001632  D001               	bra	u1156
  3070   001634                     u1155:
  3071   001634  8084               	bsf	132,0,c	;volatile
  3072   001636                     u1156:
  3073   001636                     
  3074                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3075   001636  0E42               	movlw	66
  3076   001638                     u1277:
  3077   001638  2EE8               	decfsz	wreg,f,c
  3078   00163A  D7FE               	bra	u1277
  3079   00163C  D000               	nop2	
  3080   00163E                     
  3081                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  3082   00163E  9484               	bcf	132,2,c	;volatile
  3083   001640                     
  3084                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  3085   001640  5005               	movf	lcd_send_byte@data^0,w,c
  3086   001642  ECDE  F007         	call	_lcd_cmd
  3087   001646  0012               	return		;funcret
  3088   001648                     __end_of_lcd_send_byte:
  3089                           	callstack 0
  3090                           
  3091 ;; *************** function _lcd_init *****************
  3092 ;; Defined at:
  3093 ;;		line 3 in file "LCD4b_EXSTO.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;		None
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;  i               1    5[COMRAM] unsigned char 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      void 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0, cstack
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3107 ;;      Params:         0       0       0       0       0       0       0
  3108 ;;      Locals:         1       0       0       0       0       0       0
  3109 ;;      Temps:          1       0       0       0       0       0       0
  3110 ;;      Totals:         2       0       0       0       0       0       0
  3111 ;;Total ram usage:        2 bytes
  3112 ;; Hardware stack levels used: 1
  3113 ;; Hardware stack levels required when called: 2
  3114 ;; This function calls:
  3115 ;;		_lcd_cmd
  3116 ;; This function is called by:
  3117 ;;		_main
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text18
  3122   001392                     __ptext18:
  3123                           	callstack 0
  3124   001392                     _lcd_init:
  3125                           	callstack 28
  3126   001392                     
  3127                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  3128   001392  0E00               	movlw	0
  3129   001394  6E95               	movwf	149,c	;volatile
  3130   001396                     
  3131                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  3132   001396  9496               	bcf	150,2,c	;volatile
  3133   001398                     
  3134                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  3135   001398  9296               	bcf	150,1,c	;volatile
  3136   00139A                     
  3137                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  3138   00139A  9096               	bcf	150,0,c	;volatile
  3139                           
  3140                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  3141   00139C  0E00               	movlw	0
  3142   00139E  6E83               	movwf	131,c	;volatile
  3143   0013A0                     
  3144                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  3145   0013A0  9084               	bcf	132,0,c	;volatile
  3146   0013A2                     
  3147                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  3148   0013A2  9284               	bcf	132,1,c	;volatile
  3149   0013A4                     
  3150                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  3151   0013A4  9484               	bcf	132,2,c	;volatile
  3152   0013A6                     
  3153                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3154   0013A6  0E27               	movlw	39
  3155   0013A8  6E05               	movwf	??_lcd_init^0,c
  3156   0013AA  0EF5               	movlw	245
  3157   0013AC                     u1287:
  3158   0013AC  2EE8               	decfsz	wreg,f,c
  3159   0013AE  D7FE               	bra	u1287
  3160   0013B0  2E05               	decfsz	??_lcd_init^0,f,c
  3161   0013B2  D7FC               	bra	u1287
  3162   0013B4  F000               	nop	
  3163   0013B6                     
  3164                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  3165   0013B6  0E00               	movlw	0
  3166   0013B8  6E06               	movwf	lcd_init@i^0,c
  3167   0013BA                     l1763:
  3168                           
  3169                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  3170   0013BA  0E30               	movlw	48
  3171   0013BC  ECDE  F007         	call	_lcd_cmd
  3172   0013C0                     
  3173                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3174   0013C0  0E0D               	movlw	13
  3175   0013C2  6E05               	movwf	??_lcd_init^0,c
  3176   0013C4  0EFC               	movlw	252
  3177   0013C6                     u1297:
  3178   0013C6  2EE8               	decfsz	wreg,f,c
  3179   0013C8  D7FE               	bra	u1297
  3180   0013CA  2E05               	decfsz	??_lcd_init^0,f,c
  3181   0013CC  D7FC               	bra	u1297
  3182   0013CE                     
  3183                           ;LCD4b_EXSTO.c: 22:     }
  3184   0013CE  2A06               	incf	lcd_init@i^0,f,c
  3185   0013D0  0E02               	movlw	2
  3186   0013D2  6406               	cpfsgt	lcd_init@i^0,c
  3187   0013D4  EFEE  F009         	goto	u1171
  3188   0013D8  EFF0  F009         	goto	u1170
  3189   0013DC                     u1171:
  3190   0013DC  EFDD  F009         	goto	l1763
  3191   0013E0                     u1170:
  3192   0013E0                     
  3193                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  3194   0013E0  0E02               	movlw	2
  3195   0013E2  ECDE  F007         	call	_lcd_cmd
  3196   0013E6                     
  3197                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3198   0013E6  0E1A               	movlw	26
  3199   0013E8                     u1307:
  3200   0013E8  2EE8               	decfsz	wreg,f,c
  3201   0013EA  D7FE               	bra	u1307
  3202   0013EC  D000               	nop2	
  3203   0013EE                     
  3204                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  3205   0013EE  0E28               	movlw	40
  3206   0013F0  ECDE  F007         	call	_lcd_cmd
  3207                           
  3208                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3209   0013F4  0E1A               	movlw	26
  3210   0013F6                     u1317:
  3211   0013F6  2EE8               	decfsz	wreg,f,c
  3212   0013F8  D7FE               	bra	u1317
  3213   0013FA  D000               	nop2	
  3214   0013FC                     
  3215                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  3216   0013FC  0E01               	movlw	1
  3217   0013FE  ECDE  F007         	call	_lcd_cmd
  3218   001402                     
  3219                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3220   001402  0E06               	movlw	6
  3221   001404  6E05               	movwf	??_lcd_init^0,c
  3222   001406  0E30               	movlw	48
  3223   001408                     u1327:
  3224   001408  2EE8               	decfsz	wreg,f,c
  3225   00140A  D7FE               	bra	u1327
  3226   00140C  2E05               	decfsz	??_lcd_init^0,f,c
  3227   00140E  D7FC               	bra	u1327
  3228   001410  D000               	nop2	
  3229                           
  3230                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  3231   001412  0E0C               	movlw	12
  3232   001414  ECDE  F007         	call	_lcd_cmd
  3233   001418                     
  3234                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3235   001418  0E1A               	movlw	26
  3236   00141A                     u1337:
  3237   00141A  2EE8               	decfsz	wreg,f,c
  3238   00141C  D7FE               	bra	u1337
  3239   00141E  D000               	nop2	
  3240   001420                     
  3241                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  3242   001420  0E06               	movlw	6
  3243   001422  ECDE  F007         	call	_lcd_cmd
  3244                           
  3245                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3246   001426  0E1A               	movlw	26
  3247   001428                     u1347:
  3248   001428  2EE8               	decfsz	wreg,f,c
  3249   00142A  D7FE               	bra	u1347
  3250   00142C  D000               	nop2	
  3251   00142E  0012               	return		;funcret
  3252   001430                     __end_of_lcd_init:
  3253                           	callstack 0
  3254                           
  3255 ;; *************** function _lcd_cmd *****************
  3256 ;; Defined at:
  3257 ;;		line 42 in file "LCD4b_EXSTO.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  cmd             1    wreg     unsigned char 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  cmd             1    3[COMRAM] unsigned char 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3271 ;;      Params:         0       0       0       0       0       0       0
  3272 ;;      Locals:         1       0       0       0       0       0       0
  3273 ;;      Temps:          1       0       0       0       0       0       0
  3274 ;;      Totals:         2       0       0       0       0       0       0
  3275 ;;Total ram usage:        2 bytes
  3276 ;; Hardware stack levels used: 1
  3277 ;; Hardware stack levels required when called: 1
  3278 ;; This function calls:
  3279 ;;		_set_bit
  3280 ;; This function is called by:
  3281 ;;		_lcd_init
  3282 ;;		_lcd_send_byte
  3283 ;;		_lcd_clear
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text19
  3288   000FBC                     __ptext19:
  3289                           	callstack 0
  3290   000FBC                     _lcd_cmd:
  3291                           	callstack 27
  3292                           
  3293                           ;incstack = 0
  3294                           ;lcd_cmd@cmd stored from wreg
  3295   000FBC  6E04               	movwf	lcd_cmd@cmd^0,c
  3296   000FBE                     
  3297                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  3298   000FBE  0E10               	movlw	16
  3299   000FC0  6E01               	movwf	set_bit@comp^0,c
  3300   000FC2  5004               	movf	lcd_cmd@cmd^0,w,c
  3301   000FC4  EC05  F00B         	call	_set_bit
  3302   000FC8  6E03               	movwf	??_lcd_cmd^0,c
  3303   000FCA  3A03               	swapf	??_lcd_cmd^0,f,c
  3304   000FCC  5083               	movf	131,w,c	;volatile
  3305   000FCE  1803               	xorwf	??_lcd_cmd^0,w,c
  3306   000FD0  0BEF               	andlw	-17
  3307   000FD2  1803               	xorwf	??_lcd_cmd^0,w,c
  3308   000FD4  6E83               	movwf	131,c	;volatile
  3309                           
  3310                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3311   000FD6  0E20               	movlw	32
  3312   000FD8  6E01               	movwf	set_bit@comp^0,c
  3313   000FDA  5004               	movf	lcd_cmd@cmd^0,w,c
  3314   000FDC  EC05  F00B         	call	_set_bit
  3315   000FE0  6E03               	movwf	??_lcd_cmd^0,c
  3316   000FE2  3A03               	swapf	??_lcd_cmd^0,f,c
  3317   000FE4  4603               	rlncf	??_lcd_cmd^0,f,c
  3318   000FE6  5083               	movf	131,w,c	;volatile
  3319   000FE8  1803               	xorwf	??_lcd_cmd^0,w,c
  3320   000FEA  0BDF               	andlw	-33
  3321   000FEC  1803               	xorwf	??_lcd_cmd^0,w,c
  3322   000FEE  6E83               	movwf	131,c	;volatile
  3323                           
  3324                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3325   000FF0  0E40               	movlw	64
  3326   000FF2  6E01               	movwf	set_bit@comp^0,c
  3327   000FF4  5004               	movf	lcd_cmd@cmd^0,w,c
  3328   000FF6  EC05  F00B         	call	_set_bit
  3329   000FFA  6E03               	movwf	??_lcd_cmd^0,c
  3330   000FFC  3A03               	swapf	??_lcd_cmd^0,f,c
  3331   000FFE  4603               	rlncf	??_lcd_cmd^0,f,c
  3332   001000  4603               	rlncf	??_lcd_cmd^0,f,c
  3333   001002  5083               	movf	131,w,c	;volatile
  3334   001004  1803               	xorwf	??_lcd_cmd^0,w,c
  3335   001006  0BBF               	andlw	-65
  3336   001008  1803               	xorwf	??_lcd_cmd^0,w,c
  3337   00100A  6E83               	movwf	131,c	;volatile
  3338                           
  3339                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3340   00100C  0E80               	movlw	128
  3341   00100E  6E01               	movwf	set_bit@comp^0,c
  3342   001010  5004               	movf	lcd_cmd@cmd^0,w,c
  3343   001012  EC05  F00B         	call	_set_bit
  3344   001016  6E03               	movwf	??_lcd_cmd^0,c
  3345   001018  3203               	rrcf	??_lcd_cmd^0,f,c
  3346   00101A  3203               	rrcf	??_lcd_cmd^0,f,c
  3347   00101C  5083               	movf	131,w,c	;volatile
  3348   00101E  1803               	xorwf	??_lcd_cmd^0,w,c
  3349   001020  0B7F               	andlw	-129
  3350   001022  1803               	xorwf	??_lcd_cmd^0,w,c
  3351   001024  6E83               	movwf	131,c	;volatile
  3352   001026                     
  3353                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  3354   001026  8484               	bsf	132,2,c	;volatile
  3355   001028                     
  3356                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  3357   001028  9484               	bcf	132,2,c	;volatile
  3358   00102A                     
  3359                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3360   00102A  0E42               	movlw	66
  3361   00102C                     u1357:
  3362   00102C  2EE8               	decfsz	wreg,f,c
  3363   00102E  D7FE               	bra	u1357
  3364   001030  D000               	nop2	
  3365   001032                     
  3366                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3367   001032  0E01               	movlw	1
  3368   001034  6E01               	movwf	set_bit@comp^0,c
  3369   001036  5004               	movf	lcd_cmd@cmd^0,w,c
  3370   001038  EC05  F00B         	call	_set_bit
  3371   00103C  6E03               	movwf	??_lcd_cmd^0,c
  3372   00103E  3A03               	swapf	??_lcd_cmd^0,f,c
  3373   001040  5083               	movf	131,w,c	;volatile
  3374   001042  1803               	xorwf	??_lcd_cmd^0,w,c
  3375   001044  0BEF               	andlw	-17
  3376   001046  1803               	xorwf	??_lcd_cmd^0,w,c
  3377   001048  6E83               	movwf	131,c	;volatile
  3378   00104A                     
  3379                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3380   00104A  0E02               	movlw	2
  3381   00104C  6E01               	movwf	set_bit@comp^0,c
  3382   00104E  5004               	movf	lcd_cmd@cmd^0,w,c
  3383   001050  EC05  F00B         	call	_set_bit
  3384   001054  6E03               	movwf	??_lcd_cmd^0,c
  3385   001056  3A03               	swapf	??_lcd_cmd^0,f,c
  3386   001058  4603               	rlncf	??_lcd_cmd^0,f,c
  3387   00105A  5083               	movf	131,w,c	;volatile
  3388   00105C  1803               	xorwf	??_lcd_cmd^0,w,c
  3389   00105E  0BDF               	andlw	-33
  3390   001060  1803               	xorwf	??_lcd_cmd^0,w,c
  3391   001062  6E83               	movwf	131,c	;volatile
  3392   001064                     
  3393                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3394   001064  0E04               	movlw	4
  3395   001066  6E01               	movwf	set_bit@comp^0,c
  3396   001068  5004               	movf	lcd_cmd@cmd^0,w,c
  3397   00106A  EC05  F00B         	call	_set_bit
  3398   00106E  6E03               	movwf	??_lcd_cmd^0,c
  3399   001070  3A03               	swapf	??_lcd_cmd^0,f,c
  3400   001072  4603               	rlncf	??_lcd_cmd^0,f,c
  3401   001074  4603               	rlncf	??_lcd_cmd^0,f,c
  3402   001076  5083               	movf	131,w,c	;volatile
  3403   001078  1803               	xorwf	??_lcd_cmd^0,w,c
  3404   00107A  0BBF               	andlw	-65
  3405   00107C  1803               	xorwf	??_lcd_cmd^0,w,c
  3406   00107E  6E83               	movwf	131,c	;volatile
  3407   001080                     
  3408                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3409   001080  0E08               	movlw	8
  3410   001082  6E01               	movwf	set_bit@comp^0,c
  3411   001084  5004               	movf	lcd_cmd@cmd^0,w,c
  3412   001086  EC05  F00B         	call	_set_bit
  3413   00108A  6E03               	movwf	??_lcd_cmd^0,c
  3414   00108C  3203               	rrcf	??_lcd_cmd^0,f,c
  3415   00108E  3203               	rrcf	??_lcd_cmd^0,f,c
  3416   001090  5083               	movf	131,w,c	;volatile
  3417   001092  1803               	xorwf	??_lcd_cmd^0,w,c
  3418   001094  0B7F               	andlw	-129
  3419   001096  1803               	xorwf	??_lcd_cmd^0,w,c
  3420   001098  6E83               	movwf	131,c	;volatile
  3421   00109A                     
  3422                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  3423   00109A  8484               	bsf	132,2,c	;volatile
  3424   00109C                     
  3425                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  3426   00109C  9484               	bcf	132,2,c	;volatile
  3427   00109E  0012               	return		;funcret
  3428   0010A0                     __end_of_lcd_cmd:
  3429                           	callstack 0
  3430                           
  3431 ;; *************** function _set_bit *****************
  3432 ;; Defined at:
  3433 ;;		line 36 in file "LCD4b_EXSTO.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  cmd             1    wreg     unsigned char 
  3436 ;;  comp            1    0[COMRAM] unsigned char 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  cmd             1    1[COMRAM] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      unsigned char 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3448 ;;      Params:         1       0       0       0       0       0       0
  3449 ;;      Locals:         1       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0
  3451 ;;      Totals:         2       0       0       0       0       0       0
  3452 ;;Total ram usage:        2 bytes
  3453 ;; Hardware stack levels used: 1
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_lcd_cmd
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text20
  3462   00160A                     __ptext20:
  3463                           	callstack 0
  3464   00160A                     _set_bit:
  3465                           	callstack 27
  3466                           
  3467                           ;incstack = 0
  3468                           ;set_bit@cmd stored from wreg
  3469   00160A  6E02               	movwf	set_bit@cmd^0,c
  3470   00160C                     
  3471                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  3472   00160C  5002               	movf	set_bit@cmd^0,w,c
  3473   00160E  1401               	andwf	set_bit@comp^0,w,c
  3474   001610  0900               	iorlw	0
  3475   001612  B4D8               	btfsc	status,2,c
  3476   001614  EF0E  F00B         	goto	u901
  3477   001618  EF10  F00B         	goto	u900
  3478   00161C                     u901:
  3479   00161C  EF13  F00B         	goto	l1539
  3480   001620                     u900:
  3481   001620  0E01               	movlw	1
  3482   001622  EF14  F00B         	goto	l62
  3483   001626                     l1539:
  3484   001626  0E00               	movlw	0
  3485   001628                     l62:
  3486   001628  0012               	return		;funcret
  3487   00162A                     __end_of_set_bit:
  3488                           	callstack 0
  3489                           
  3490 ;; *************** function _config_IO *****************
  3491 ;; Defined at:
  3492 ;;		line 77 in file "Main_counter.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;		None
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg, status,2
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3506 ;;      Params:         0       0       0       0       0       0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0
  3508 ;;      Temps:          0       0       0       0       0       0       0
  3509 ;;      Totals:         0       0       0       0       0       0       0
  3510 ;;Total ram usage:        0 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_main
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text21
  3520   001648                     __ptext21:
  3521                           	callstack 0
  3522   001648                     _config_IO:
  3523                           	callstack 30
  3524   001648                     
  3525                           ;Main_counter.c: 79:     TRISB = 0X01;
  3526   001648  0E01               	movlw	1
  3527   00164A  6E93               	movwf	147,c	;volatile
  3528                           
  3529                           ;Main_counter.c: 80:     ADCON1 = 0X0F;
  3530   00164C  0E0F               	movlw	15
  3531   00164E  6EC1               	movwf	193,c	;volatile
  3532   001650  0012               	return		;funcret
  3533   001652                     __end_of_config_IO:
  3534                           	callstack 0
  3535                           
  3536 ;; *************** function _config_FOSC *****************
  3537 ;; Defined at:
  3538 ;;		line 72 in file "Main_counter.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3552 ;;      Params:         0       0       0       0       0       0       0
  3553 ;;      Locals:         0       0       0       0       0       0       0
  3554 ;;      Temps:          0       0       0       0       0       0       0
  3555 ;;      Totals:         0       0       0       0       0       0       0
  3556 ;;Total ram usage:        0 bytes
  3557 ;; Hardware stack levels used: 1
  3558 ;; This function calls:
  3559 ;;		Nothing
  3560 ;; This function is called by:
  3561 ;;		_main
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text22
  3566   001652                     __ptext22:
  3567                           	callstack 0
  3568   001652                     _config_FOSC:
  3569                           	callstack 30
  3570   001652                     
  3571                           ;Main_counter.c: 74:     OSCCON = 0X72;
  3572   001652  0E72               	movlw	114
  3573   001654  6ED3               	movwf	211,c	;volatile
  3574                           
  3575                           ;Main_counter.c: 75:     OSCTUNE = 0X00;
  3576   001656  0E00               	movlw	0
  3577   001658  6E9B               	movwf	155,c	;volatile
  3578   00165A  0012               	return		;funcret
  3579   00165C                     __end_of_config_FOSC:
  3580                           	callstack 0
  3581                           
  3582                           	psect	rparam
  3583   000000                     
  3584                           	psect	idloc
  3585                           
  3586                           ;Config register IDLOC0 @ 0x200000
  3587                           ;	unspecified, using default values
  3588   200000                     	org	2097152
  3589   200000  FF                 	db	255
  3590                           
  3591                           ;Config register IDLOC1 @ 0x200001
  3592                           ;	unspecified, using default values
  3593   200001                     	org	2097153
  3594   200001  FF                 	db	255
  3595                           
  3596                           ;Config register IDLOC2 @ 0x200002
  3597                           ;	unspecified, using default values
  3598   200002                     	org	2097154
  3599   200002  FF                 	db	255
  3600                           
  3601                           ;Config register IDLOC3 @ 0x200003
  3602                           ;	unspecified, using default values
  3603   200003                     	org	2097155
  3604   200003  FF                 	db	255
  3605                           
  3606                           ;Config register IDLOC4 @ 0x200004
  3607                           ;	unspecified, using default values
  3608   200004                     	org	2097156
  3609   200004  FF                 	db	255
  3610                           
  3611                           ;Config register IDLOC5 @ 0x200005
  3612                           ;	unspecified, using default values
  3613   200005                     	org	2097157
  3614   200005  FF                 	db	255
  3615                           
  3616                           ;Config register IDLOC6 @ 0x200006
  3617                           ;	unspecified, using default values
  3618   200006                     	org	2097158
  3619   200006  FF                 	db	255
  3620                           
  3621                           ;Config register IDLOC7 @ 0x200007
  3622                           ;	unspecified, using default values
  3623   200007                     	org	2097159
  3624   200007  FF                 	db	255
  3625                           
  3626                           	psect	config
  3627                           
  3628                           ; Padding undefined space
  3629   300000                     	org	3145728
  3630   300000  FF                 	db	255
  3631                           
  3632                           ;Config register CONFIG1H @ 0x300001
  3633                           ;	Oscillator Selection bits
  3634                           ;	OSC = HS, HS oscillator
  3635                           ;	Fail-Safe Clock Monitor Enable bit
  3636                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3637                           ;	Internal/External Oscillator Switchover bit
  3638                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3639   300001                     	org	3145729
  3640   300001  02                 	db	2
  3641                           
  3642                           ;Config register CONFIG2L @ 0x300002
  3643                           ;	Power-up Timer Enable bit
  3644                           ;	PWRT = OFF, PWRT disabled
  3645                           ;	Brown-out Reset Enable bits
  3646                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3647                           ;	Brown Out Reset Voltage bits
  3648                           ;	BORV = 3, Minimum setting
  3649   300002                     	org	3145730
  3650   300002  19                 	db	25
  3651                           
  3652                           ;Config register CONFIG2H @ 0x300003
  3653                           ;	Watchdog Timer Enable bit
  3654                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3655                           ;	Watchdog Timer Postscale Select bits
  3656                           ;	WDTPS = 32768, 1:32768
  3657   300003                     	org	3145731
  3658   300003  1E                 	db	30
  3659                           
  3660                           ; Padding undefined space
  3661   300004                     	org	3145732
  3662   300004  FF                 	db	255
  3663                           
  3664                           ;Config register CONFIG3H @ 0x300005
  3665                           ;	CCP2 MUX bit
  3666                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3667                           ;	PORTB A/D Enable bit
  3668                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3669                           ;	Low-Power Timer1 Oscillator Enable bit
  3670                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3671                           ;	MCLR Pin Enable bit
  3672                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3673   300005                     	org	3145733
  3674   300005  81                 	db	129
  3675                           
  3676                           ;Config register CONFIG4L @ 0x300006
  3677                           ;	Stack Full/Underflow Reset Enable bit
  3678                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3679                           ;	Single-Supply ICSP Enable bit
  3680                           ;	LVP = OFF, Single-Supply ICSP disabled
  3681                           ;	Extended Instruction Set Enable bit
  3682                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3683                           ;	Background Debugger Enable bit
  3684                           ;	DEBUG = 0x1, unprogrammed default
  3685   300006                     	org	3145734
  3686   300006  81                 	db	129
  3687                           
  3688                           ; Padding undefined space
  3689   300007                     	org	3145735
  3690   300007  FF                 	db	255
  3691                           
  3692                           ;Config register CONFIG5L @ 0x300008
  3693                           ;	Code Protection bit
  3694                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3695                           ;	Code Protection bit
  3696                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3697                           ;	Code Protection bit
  3698                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3699                           ;	Code Protection bit
  3700                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3701   300008                     	org	3145736
  3702   300008  0F                 	db	15
  3703                           
  3704                           ;Config register CONFIG5H @ 0x300009
  3705                           ;	Boot Block Code Protection bit
  3706                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3707                           ;	Data EEPROM Code Protection bit
  3708                           ;	CPD = OFF, Data EEPROM not code-protected
  3709   300009                     	org	3145737
  3710   300009  C0                 	db	192
  3711                           
  3712                           ;Config register CONFIG6L @ 0x30000A
  3713                           ;	Write Protection bit
  3714                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3715                           ;	Write Protection bit
  3716                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3717                           ;	Write Protection bit
  3718                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3719                           ;	Write Protection bit
  3720                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3721   30000A                     	org	3145738
  3722   30000A  0F                 	db	15
  3723                           
  3724                           ;Config register CONFIG6H @ 0x30000B
  3725                           ;	Configuration Register Write Protection bit
  3726                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3727                           ;	Boot Block Write Protection bit
  3728                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3729                           ;	Data EEPROM Write Protection bit
  3730                           ;	WRTD = OFF, Data EEPROM not write-protected
  3731   30000B                     	org	3145739
  3732   30000B  E0                 	db	224
  3733                           
  3734                           ;Config register CONFIG7L @ 0x30000C
  3735                           ;	Table Read Protection bit
  3736                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3737                           ;	Table Read Protection bit
  3738                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3739                           ;	Table Read Protection bit
  3740                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3741                           ;	Table Read Protection bit
  3742                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3743   30000C                     	org	3145740
  3744   30000C  0F                 	db	15
  3745                           
  3746                           ;Config register CONFIG7H @ 0x30000D
  3747                           ;	Boot Block Table Read Protection bit
  3748                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3749   30000D                     	org	3145741
  3750   30000D  40                 	db	64
  3751                           tosu	equ	0xFFF
  3752                           tosh	equ	0xFFE
  3753                           tosl	equ	0xFFD
  3754                           stkptr	equ	0xFFC
  3755                           pclatu	equ	0xFFB
  3756                           pclath	equ	0xFFA
  3757                           pcl	equ	0xFF9
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           prodh	equ	0xFF4
  3763                           prodl	equ	0xFF3
  3764                           indf0	equ	0xFEF
  3765                           postinc0	equ	0xFEE
  3766                           postdec0	equ	0xFED
  3767                           preinc0	equ	0xFEC
  3768                           plusw0	equ	0xFEB
  3769                           fsr0h	equ	0xFEA
  3770                           fsr0l	equ	0xFE9
  3771                           wreg	equ	0xFE8
  3772                           indf1	equ	0xFE7
  3773                           postinc1	equ	0xFE6
  3774                           postdec1	equ	0xFE5
  3775                           preinc1	equ	0xFE4
  3776                           plusw1	equ	0xFE3
  3777                           fsr1h	equ	0xFE2
  3778                           fsr1l	equ	0xFE1
  3779                           bsr	equ	0xFE0
  3780                           indf2	equ	0xFDF
  3781                           postinc2	equ	0xFDE
  3782                           postdec2	equ	0xFDD
  3783                           preinc2	equ	0xFDC
  3784                           plusw2	equ	0xFDB
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    112     119
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S866$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S813$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S813$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[16]), bufferLCD(BANK0[16]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10003
                                            110 COMRAM     2     2      0
                        _config_FOSC
                          _config_IO
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    7340
                                             91 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6987
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           24    18      6    6626
                                             62 COMRAM    21    15      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3867
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2195
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1083
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1080
                                              6 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     207
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     237
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1789
                                              6 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_IO
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     70      77       1       93.7%
BITBIGSFRh          2C      0       0      16        0.0%
BITBIGSFRlhl        25      0       0      18        0.0%
BITBIGSFRlhh        11      0       0      17        0.0%
BITBIGSFRlllhh       E      0       0      21        0.0%
BITBIGSFRllhh        4      0       0      19        0.0%
BITBIGSFRlllhl       1      0       0      22        0.0%
BITBIGSFRllhl        1      0       0      20        0.0%
BITBIGSFRllll        1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A7      24        0.0%
DATA                 0      0      A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon May 22 19:29:15 2023

                     l25 165A                       l28 1650                       l62 1628  
                     l81 1390                       l66 109E                       l58 142E  
                     l84 15E6                       l69 1646           ?_lcd_send_byte 0005  
    ___wmul@multiplicand 0003                      l211 0E70                      l198 0D0C  
                    l800 06D2                      l802 06DA                      l803 0720  
                    l902 1246                      l910 1554                      l816 08EA  
                    l913 165C                      l762 147C                      l851 1594  
                    l844 14CA                      l838 0B84                      l848 158C  
                    l792 12CE                      l873 0FB2                      l794 12F0  
                    l876 0FBA                      l789 128C                      l879 15C0  
                    l887 1510                      u701 0BF4                      u710 0C18  
                    u630 1190                      u711 0C14                      u631 118C  
                    u720 0C42                      u800 0E30                      u640 11A2  
                    u721 0C3E                      u801 0E2C                      u641 119E  
                    u730 0C82                      u650 11CA                      u810 1256  
                    u731 0C7E                      u651 11C6                      u811 1252  
                    u900 1620                      u740 0CCC                      u660 1200  
                    u820 1278                      u901 161C                      u741 0CC8  
                    u661 11FC                      u821 1274                      u750 0D20  
                    u670 1554                      u830 12CE                      u910 0668  
                    u751 0D1C                      u671 1550                      u831 12CA  
                    u911 0662                      u680 0B98                      u760 0D52  
                    u840 12DC                      u920 066A                      u681 0B94  
                    u761 0D4E                      u841 12D8                      u690 0BCA  
                    u770 0D90                      u850 1570                      u930 067C  
                    u691 0BC6                      u771 0D8C                      u851 156C  
                    u931 0678                      u860 15BA                      u780 0DBA  
                    u940 06AA                      u861 15B4                      u781 0DB6  
                    u941 06A6                      u870 15BC                      u790 0DE8  
                    u950 06C6                      u791 0DE4                      u951 06C2  
                    u880 14E4                      u960 06F2                      u881 14E0  
                    u961 06EE                      u890 1506                      u970 0708  
                    u891 1502                      u971 0704                      u980 0844  
                    u981 0840                      u990 0862                      u991 085E  
                    _abs 1556                      _pad 1248                      wreg 000FE8  
                   ?_abs 0013                     l1401 151E                     l1403 1530  
                   l1421 0BBC                     l1413 0B86                     l1405 1534  
                   l1501 1284                     l1407 15C2                     l1431 0C18  
                   l1423 0BCA                     l1415 0B8A                     l1511 1556  
                   l1503 1298                     l1409 15DE                     l1521 14D0  
                   l1441 0C82                     l1433 0C20                     l1425 0BEA  
                   l1417 0B98                     l1513 1570                     l1505 12AC  
                   l1531 160C                     l1515 1596                     l1523 14E4  
                   l1611 0EA6                     l1603 0E72                     l1451 0CCC  
                   l1443 0CA2                     l1435 0C34                     l1427 0BEE  
                   l1419 0BB8                     l1507 12B0                     l1533 1620  
                   l1525 1506                     l1613 0EDA                     l1605 0E86  
                   l1453 0CEC                     l1445 0CA4                     l1437 0C42  
                   l1429 0BFA                     l1461 0D20                     l1509 12DC  
                   l1701 0B1A                     l1527 150A                     l1519 14CC  
                   l1615 0EE2                     l1447 0CB6                     l1439 0C54  
                   l1471 0D90                     l1463 0D40                     l1391 11AC  
                   l1551 069C                     l1543 0638                     l1641 102A  
                   l1721 1636                     l1625 0F54                     l1617 0EEA  
                   l1609 0E8A                     l1449 0CBC                     l1481 0E08  
                   l1473 0D98                     l1465 0D44                     l1457 0D0E  
                   l1393 11CA                     l1385 117E                     l1561 06F2  
                   l1553 06AA                     l1545 0658                     l1705 0B4A  
                   l1801 1430                     l1539 1626                     l1651 109A  
                   l1643 1032                     l1635 0FBE                     l1723 163E  
                   l1627 0F84                     l1619 0F1E                     l1483 0E1A  
                   l1475 0DAC                     l1467 0D52                     l1459 0D12  
                   l1395 1200                     l1387 1190                     l1571 0728  
                   l1563 06F8                     l1555 06AC                     l1547 066C  
                   l1731 14A6                     l1803 1440                     l1653 109C  
                   l1645 104A                     l1637 1026                     l1741 1392  
                   l1725 1640                     l1629 0F96                     l1477 0DBA  
                   l1485 0E20                     l1469 0D72                     l1389 11A2  
                   l1493 1248                     l1581 07C6                     l1573 0732  
                   l1565 0708                     l1557 06C6                     l1549 067C  
                   l1661 092A                     l1709 0B5C                     l1733 14C2  
                   l1805 1448                     l1821 10BE                     l1813 10A0  
                   l1647 1064                     l1639 1028                     l1751 13A2  
                   l1743 1396                     l1719 162C                     l1487 0E30  
                   l1479 0DE8                     l1399 1512                     l1495 1256  
                   l1591 0896                     l1575 0738                     l1583 082A  
                   l1567 0714                     l1559 06E2                     l1663 092E  
                   l1655 08EC                     l1727 147E                     l1807 1450  
                   l1831 1122                     l1823 10D0                     l1815 10A8  
                   l1737 1652                     l1649 1080                     l1753 13A4  
                   l1745 1398                     l1489 0E50                     l1497 126A  
                   l1585 0844                     l1593 08A4                     l1577 07BA  
                   l1569 071C                     l1681 09FA                     l1673 095A  
                   l1665 093A                     l1657 0910                     l1729 148A  
                   l1809 146C                     l1825 10EC                     l1833 113C  
                   l1817 10AC                     l1739 1648                     l1771 13E0  
                   l1763 13BA                     l1755 13A6                     l1747 139A  
                   l1499 1278                     l1595 08B4                     l1587 0862  
                   l1579 07C0                     l1691 0A44                     l1683 0A08  
                   l1667 093C                     l1675 098E                     l1659 091E  
                   l1835 1144                     l1827 10FE                     l1819 10BA  
                   l1781 1418                     l1773 13E6                     l1765 13C0  
                   l1757 13B6                     l1749 13A0                     l1597 08BA  
                   l1589 087C                     l1693 0A7C                     l1685 0A16  
                   l1677 09A0                     l1669 094E                     l1837 1156  
                   l1829 111A                     l1783 1420                     l1775 13EE  
                   l1767 13CE                     l1791 1320                     l1599 08CA  
                   l1695 0A8C                     l1687 0A36                     l1679 09C4  
                   l1839 1168                     l1777 13FC                     l1769 13D0  
                   l1793 1326                     l1785 12F4                     l1697 0AA8  
                   l1779 1402                     l1795 1334                     l1787 1304  
                   l1699 0AC4                     l1797 135C                     l1789 130E  
                   ?_pad 0011                     l1799 1360                     l1887 0980  
                   l1889 0F08                     STR_1 0612                     STR_2 0632  
                   STR_3 0622                     STR_4 0601                     u1000 087C  
                   u1001 0878                     u1010 0896                     u1011 0892  
                   u1020 08A4                     u1100 09C4                     u1021 08A0  
                   u1101 09C0                     u1030 08B4                     u1110 0A08  
                   u1031 08B0                     u1111 0A04                     u1200 1354  
                   u1040 0EA6                     u1120 0A7C                     u1041 0EA2  
                   u1121 0A78                     u1210 1380                     u1050 0ED6  
                   u1130 0AA8                     u1051 0ED2                     u1131 0AA4  
                   u1220 1390                     u1060 0F84                     u1140 0AC4  
                   u1221 138C                     u1061 0F80                     u1141 0AC0  
                   u1070 0F96                     u1230 10BA                     u1207 134A  
                   u1071 0F92                     u1231 10B6                     u1080 0910  
                   u1160 14C2                     u1240 111A                     u1217 1376  
                   u1081 090C                     u1161 14BE                     u1241 1116  
                   u1170 13E0                     u1090 09A0                     u1307 13E8  
                   u1171 13DC                     u1155 1634                     u1091 099C  
                   u1156 1636                     u1180 1304                     u1317 13F6  
                   u1181 1300                     u1190 1320                     u1327 1408  
                   u1191 131C                     u1337 141A                     u1257 112C  
                   u1347 1428                     u1267 116E                     u1357 102C  
                   u1277 1638                     u1287 13AC                     u1297 13C6  
                   abs@a 0013                     _dbuf 0080                     _atoi 0E72  
                   _main 10A0                     _dtoa 0638                     _prec 0073  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 0017  
        __end_of___aodiv 0D0E                    ?_atoi 0007                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0E72             vfpfcnvrt@fmt 0041  
                  _PORTD 000F83                    _TRISB 000F93                    _TRISD 000F95  
        __end_of_lcd_cmd 10A0                    _flags 0077                    _fputc 117E  
                  _fputs 1512          __end_of_isdigit 15C2                    atoi@n 000E  
                  pad@fp 0011                    atoi@s 0007                    _width 0071  
                  _putch 165C                    dtoa@d 001E                    dtoa@i 003C  
                  dtoa@n 0034                    dtoa@p 0030                    dtoa@s 003E  
                  dtoa@w 0032          __end_of_isspace 1512          __end_of_set_bit 162A  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 147E  
           lcd_write@end 000A             lcd_write@col 0007             lcd_write@lin 000B  
           lcd_write@str 0008          __initialization 15E8             __end_of_atoi 0FBC  
           __end_of_main 117E             __end_of_dtoa 08EC          ??_lcd_send_byte 0006  
                 ??_atoi 0009                   ??_main 006F                   ??_dtoa 0026  
          __activetblptr 000002                   _ADCON1 000FC1                   ?_fputc 0001  
                 ?_fputs 000A                   ?_putch 0001                   _OSCCON 000FD3  
          vfpfcnvrt@done 0050             vfprintf@cfmt 005A         __end_of_lcd_init 1430  
              ??___aodiv 0011                ??___aomod 0011                   ___wmul 15C2  
                 clear_0 15EE                   clear_1 15FA                   isa$std 000001  
                 pad@buf 0013                ??_lcd_cmd 0003                   dtoa@fp 001C  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A                ??_isdigit 0003             __mediumconst 0000  
              ??_isspace 0003                ??_set_bit 0002                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 14CC                ??_sprintf 0062               __accesstop 0080  
__end_of__initialization 1600            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1248            __end_of_fputs 1556            __end_of_putch 165E  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0080                  ?___wmul 0001       lcd_send_byte@level 0006  
                _OSCTUNE 000F9B                ?_lcd_init 0001                  __Hparam 0000  
                __Lparam 0000        __end_of_config_IO 1652                  ___aodiv 0B86  
                ___aomod 0D0E        __end_of_lcd_write 1392                ?_vfprintf 0054  
            set_bit@comp 0001             __psmallconst 0600                  __pcinit 15E8  
                __ramtop 0600                  __ptext0 10A0                  __ptext1 1430  
                __ptext2 147E                  __ptext3 08EC                  __ptext4 0638  
                __ptext5 1248                  __ptext6 1512                  __ptext7 117E  
                __ptext8 165C                  __ptext9 1556                  _lcd_cmd 0FBC  
                _counter 0075                  _isdigit 1596                  _isspace 14CC  
                _set_bit 160A                  atoi@neg 000C                  _sprintf 1430  
             ??_lcd_init 0005     end_of_initialization 1600                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 0B86  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE         vfpfcnvrt@convarg 0048               ??_vfprintf 005A  
  __end_of_lcd_send_byte 1648                _PORTBbits 000F81                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISEbits 000F96               lcd_cmd@cmd 0004  
          ??_config_FOSC 0001              vfpfcnvrt@ap 0043              vfpfcnvrt@cp 0052  
            vfpfcnvrt@fp 003F           __end_of___wmul 15E8      start_initialization 15E8  
            __end_of_abs 1596              __end_of_pad 12F2              vfprintf@fmt 0056  
    __end_of_config_FOSC 165C                 ??___wmul 0005              __pbssCOMRAM 0071  
       ___aodiv@dividend 0001                 ?___aodiv 0001                 ?___aomod 0001  
       ___aodiv@quotient 0013                _bufferLCD 00A0                _config_IO 1648  
      lcd_send_byte@data 0005                 ?_lcd_cmd 0001                _lcd_write 12F2  
            __smallconst 0600                 ?_isdigit 0001                 ?_isspace 0001  
               ?_set_bit 0001               set_bit@cmd 0002                 ?_sprintf 005C  
         ___wmul@product 0005              _config_FOSC 1652                _vfpfcnvrt 08EC  
             ?_config_IO 0001               ?_lcd_write 0007        ___wmul@multiplier 0001  
              lcd_init@i 0006                 __Hrparam 0000               vfprintf@ap 0058  
               __Lrparam 0000               vfprintf@fp 0054               ?_vfpfcnvrt 003F  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005E  
               _dtoa$904 002E                 __ptext10 0D0E                 __ptext11 0B86  
               __ptext20 160A                 __ptext12 0E72                 __ptext21 1648  
               __ptext13 14CC                 __ptext22 1652                 __ptext14 1596  
               __ptext15 15C2                 __ptext16 12F2                 __ptext17 162A  
               __ptext18 1392                 __ptext19 0FBC                 _lcd_init 1392  
               isa$xinst 000000                 _vfprintf 147E              ??_config_IO 0001  
            _isspace$953 0005              ??_lcd_write 000A         ___aomod@dividend 0001  
               isdigit@c 0001                sprintf@ap 0062                 isspace@c 0001  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0045          ___aomod@counter 0011  
          _lcd_send_byte 162A                 sprintf@f 0064                 sprintf@s 005C  
           ___aodiv@sign 0012             ?_config_FOSC 0001             ___aomod@sign 0012  
